// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/CommonDm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataModel {

  /// <summary>Holder for reflection information generated from Protos/CommonDm.proto</summary>
  public static partial class CommonDmReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/CommonDm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonDmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQcm90b3MvQ29tbW9uRG0ucHJvdG8SCURhdGFNb2RlbCIaCgpEYXRlVGlt",
            "ZURNEgwKBHRpbWUYASACKAMiGgoKVGltZVNwYW5ETRIMCgR0aW1lGAEgAigD",
            "IqABCgdSYW5nZURNEiYKCV9vcGVyYXRvchgBIAIoDjITLkRhdGFNb2RlbC5F",
            "UmFuZ2VPcBIiCghfb3BlcmFuZBgCIAEoCzIQLkRhdGFNb2RlbC5WYXJETRIl",
            "Cglfb3BlcmFuZDIYAyABKAsyEi5EYXRhTW9kZWwuUmFuZ2VETRIiCgZfb3Ro",
            "ZXIYBCABKAsyEi5EYXRhTW9kZWwuUmFuZ2VETSJKCghOdW1SYW5nZRIhCgJv",
            "cBgBIAIoDjIVLkRhdGFNb2RlbC5FQ29tcGFyZU9wEgwKBGxlZnQYAiACKAES",
            "DQoFcmlnaHQYAyABKAEiZAoGRm9udERNEgwKBGZhY2UYASACKAkSDAoEc2l6",
            "ZRgCIAEoARINCgVjb2xvchgDIAEoBRIMCgRib2xkGAQgASgIEg4KBml0YWxp",
            "YxgFIAEoCBIRCgl1bmRlcmxpbmUYBiABKAgizwEKCVRpbWVSYW5nZRIjCgR0",
            "eXBlGAEgAigOMhUuRGF0YU1vZGVsLkVUaW1lUmFuZ2USIQoCb3AYAiABKA4y",
            "FS5EYXRhTW9kZWwuRUNvbXBhcmVPcBIQCghsZWZ0VGljaxgDIAEoAxIRCgly",
            "aWdodFRpY2sYBCABKAMSGQoRaW50cmFkYXlTdGFydFRpY2sYBSABKAMSFwoP",
            "aW50cmFkYXlFbmRUaWNrGAYgASgDEiEKB3dlZWtEYXkYByABKA4yEC5EYXRh",
            "TW9kZWwuRVdlZWsiQwoOQ29sb3JSYW5nZUl0ZW0SIgoFcmFuZ2UYASACKAsy",
            "Ey5EYXRhTW9kZWwuTnVtUmFuZ2USDQoFY29sb3IYAyACKAUiNwoKQ29sb3JS",
            "YW5nZRIpCgZyYW5nZXMYASADKAsyGS5EYXRhTW9kZWwuQ29sb3JSYW5nZUl0",
            "ZW0iIgoFVmFyRE0SCwoDdmFsGAEgAigJEgwKBHR5cGUYAiACKAkidwoGUGFy",
            "YURNEgwKBG5hbWUYASACKAkSDQoFZ3JvdXAYAiACKAkSDAoEZGVzYxgDIAEo",
            "CRIfCgV2YWx1ZRgEIAEoCzIQLkRhdGFNb2RlbC5WYXJETRIhCgdwcmVzZXRz",
            "GAUgAygLMhAuRGF0YU1vZGVsLlZhckRNIlcKBEtWRE0SCwoDa2V5GAEgAigJ",
            "Eh8KBXZhbHVlGAIgAigLMhAuRGF0YU1vZGVsLlZhckRNEiEKCG5lc3Rpbmdz",
            "GAMgAygLMg8uRGF0YU1vZGVsLktWRE0qigEKBUVXZWVrEgoKBk1vbmRheRAB",
            "EgsKB1R1ZXNkYXkQAhINCglXZWRuZXNkYXkQBBIMCghUaHVyc2RheRAIEgoK",
            "BkZyaWRheRAQEgwKCFNhdHVyZGF5ECASCgoGU3VuZGF5EEASCwoHV29ya2Rh",
            "eRAfEgoKBkRheU9mZhBgEgwKCEV2ZXJ5ZGF5EH8qWgoKRUxpbmVTdHlsZRIN",
            "CglMaW5lX05vbmUQABIOCgpMSU5FX1NPTElEEAESDQoJTElORV9EQVNIEAIS",
            "DAoITElORV9ET1QQAxIQCgxMSU5FX0RBU0hET1QQBCqQAgoORVByb3RvRGF0",
            "YVR5cGUSCQoFSW50MzIQARIJCgVJbnQ2NBACEgoKBlVJbnQzMhADEgoKBlVJ",
            "bnQ2NBAEEgoKBlNpbmdsZRAFEgoKBkRvdWJsZRAGEgoKBlN0cmluZxAHEgoK",
            "BlJDb2xvchAIEggKBEVudW0QCRIICgRCb29sEAoSDAoIRGF0ZVRpbWUQCxIM",
            "CghUaW1lU3BhbhAMEgwKCE51bXJhbmdlEA0SDQoJVGltZXJhbmdlEA4SCAoE",
            "VXNlchAPEgoKBkZvbnREbRAQEgkKBVJhbmdlEBESDgoKQ29sb3JyYW5nZRAS",
            "EggKBEZpbGUQExINCglEaXJlY3RvcnkQFBIJCgVDb2xvchAVKnoKCEVSYW5n",
            "ZU9wEgoKBlJFcXVhbBABEg0KCVJOb3RFcXVhbBACEgwKCFJHcmVhdGVyEAMS",
            "EQoNUkdyZWF0ZXJFcXVhbBAEEgwKCFJTbWFsbGVyEAUSEQoNUlNtYWxsZXJF",
            "cXVhbBAGEggKBFJBbmQQBxIHCgNST3IQCCqCAQoKRUNvbXBhcmVPcBIJCgVF",
            "cXVhbBABEgwKCE5vdEVxdWFsEAISCwoHR3JlYXRlchADEhAKDEdyZWF0ZXJF",
            "cXVhbBAEEgsKB1NtYWxsZXIQBRIQCgxTbWFsbGVyRXF1YWwQBhILCgdCZXR3",
            "ZWVuEAcSEAoMQmV0d2VlbkVxdWFsEAgqmgEKCkVUaW1lUmFuZ2USCgoGTm9y",
            "bWFsEAESCAoEU3BhbhACEgwKCFRoaXNZZWFyEAMSDAoITGFzdFllYXIQBBIN",
            "CglUaGlzTW9udGgQBRINCglMYXN0TW9udGgQBhIMCghUaGlzV2VlaxAHEgwK",
            "CExhc3RXZWVrEAgSCQoFVG9kYXkQCRIMCghZZXN0b2RheRAKEgcKA0FsbBAL"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataModel.EWeek), typeof(global::DataModel.ELineStyle), typeof(global::DataModel.EProtoDataType), typeof(global::DataModel.ERangeOp), typeof(global::DataModel.ECompareOp), typeof(global::DataModel.ETimeRange), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.DateTimeDM), global::DataModel.DateTimeDM.Parser, new[]{ "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.TimeSpanDM), global::DataModel.TimeSpanDM.Parser, new[]{ "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.RangeDM), global::DataModel.RangeDM.Parser, new[]{ "Operator", "Operand", "Operand2", "Other" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.NumRange), global::DataModel.NumRange.Parser, new[]{ "Op", "Left", "Right" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.FontDM), global::DataModel.FontDM.Parser, new[]{ "Face", "Size", "Color", "Bold", "Italic", "Underline" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.TimeRange), global::DataModel.TimeRange.Parser, new[]{ "Type", "Op", "LeftTick", "RightTick", "IntradayStartTick", "IntradayEndTick", "WeekDay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.ColorRangeItem), global::DataModel.ColorRangeItem.Parser, new[]{ "Range", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.ColorRange), global::DataModel.ColorRange.Parser, new[]{ "Ranges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.VarDM), global::DataModel.VarDM.Parser, new[]{ "Val", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.ParaDM), global::DataModel.ParaDM.Parser, new[]{ "Name", "Group", "Desc", "Value", "Presets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.KVDM), global::DataModel.KVDM.Parser, new[]{ "Key", "Value", "Nestings" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EWeek {
    /// <summary>
    ///星期一
    /// </summary>
    [pbr::OriginalName("Monday")] Monday = 1,
    /// <summary>
    ///星期二
    /// </summary>
    [pbr::OriginalName("Tuesday")] Tuesday = 2,
    /// <summary>
    ///星期三
    /// </summary>
    [pbr::OriginalName("Wednesday")] Wednesday = 4,
    /// <summary>
    ///星期四
    /// </summary>
    [pbr::OriginalName("Thursday")] Thursday = 8,
    /// <summary>
    ///星期五
    /// </summary>
    [pbr::OriginalName("Friday")] Friday = 16,
    /// <summary>
    ///星期六
    /// </summary>
    [pbr::OriginalName("Saturday")] Saturday = 32,
    /// <summary>
    ///星期日
    /// </summary>
    [pbr::OriginalName("Sunday")] Sunday = 64,
    /// <summary>
    ///工作日
    /// </summary>
    [pbr::OriginalName("Workday")] Workday = 31,
    /// <summary>
    ///休息日
    /// </summary>
    [pbr::OriginalName("DayOff")] DayOff = 96,
    /// <summary>
    ///每日
    /// </summary>
    [pbr::OriginalName("Everyday")] Everyday = 127,
  }

  public enum ELineStyle {
    /// <summary>
    /// An invisible line.
    /// </summary>
    [pbr::OriginalName("Line_None")] LineNone = 0,
    /// <summary>
    /// A solid line.
    /// </summary>
    [pbr::OriginalName("LINE_SOLID")] LineSolid = 1,
    /// <summary>
    /// A dash line.
    /// </summary>
    [pbr::OriginalName("LINE_DASH")] LineDash = 2,
    /// <summary>
    /// A dot line.
    /// </summary>
    [pbr::OriginalName("LINE_DOT")] LineDot = 3,
    /// <summary>
    /// A dash-dot line.
    /// </summary>
    [pbr::OriginalName("LINE_DASHDOT")] LineDashdot = 4,
  }

  public enum EProtoDataType {
    [pbr::OriginalName("Int32")] Int32 = 1,
    [pbr::OriginalName("Int64")] Int64 = 2,
    [pbr::OriginalName("UInt32")] Uint32 = 3,
    [pbr::OriginalName("UInt64")] Uint64 = 4,
    [pbr::OriginalName("Single")] Single = 5,
    [pbr::OriginalName("Double")] Double = 6,
    [pbr::OriginalName("String")] String = 7,
    /// <summary>
    /// RColor, 使用int32
    /// </summary>
    [pbr::OriginalName("RColor")] Rcolor = 8,
    /// <summary>
    /// string指定类型, int32为实际值
    /// </summary>
    [pbr::OriginalName("Enum")] Enum = 9,
    /// <summary>
    /// bool
    /// </summary>
    [pbr::OriginalName("Bool")] Bool = 10,
    /// <summary>
    /// 日期
    /// </summary>
    [pbr::OriginalName("DateTime")] DateTime = 11,
    /// <summary>
    /// 时间段
    /// </summary>
    [pbr::OriginalName("TimeSpan")] TimeSpan = 12,
    /// <summary>
    /// 区间
    /// </summary>
    [pbr::OriginalName("Numrange")] Numrange = 13,
    /// <summary>
    /// 时间区间
    /// </summary>
    [pbr::OriginalName("Timerange")] Timerange = 14,
    /// <summary>
    /// 用户定义数据类型,string指定类型，user为二进制序列化数据
    /// </summary>
    [pbr::OriginalName("User")] User = 15,
    /// <summary>
    /// 字体大小
    /// </summary>
    [pbr::OriginalName("FontDm")] FontDm = 16,
    /// <summary>
    /// Range
    /// </summary>
    [pbr::OriginalName("Range")] Range = 17,
    /// <summary>
    /// color Range
    /// </summary>
    [pbr::OriginalName("Colorrange")] Colorrange = 18,
    /// <summary>
    /// 一个文件
    /// </summary>
    [pbr::OriginalName("File")] File = 19,
    /// <summary>
    /// 一个文件夹
    /// </summary>
    [pbr::OriginalName("Directory")] Directory = 20,
    /// <summary>
    /// wpf Color
    /// </summary>
    [pbr::OriginalName("Color")] Color = 21,
  }

  public enum ERangeOp {
    /// <summary>
    /// value == left
    /// </summary>
    [pbr::OriginalName("REqual")] Requal = 1,
    /// <summary>
    /// value != left
    /// </summary>
    [pbr::OriginalName("RNotEqual")] RnotEqual = 2,
    /// <summary>
    /// value > left
    /// </summary>
    [pbr::OriginalName("RGreater")] Rgreater = 3,
    /// <summary>
    /// value >= left
    /// </summary>
    [pbr::OriginalName("RGreaterEqual")] RgreaterEqual = 4,
    /// <summary>
    /// value &lt; left
    /// </summary>
    [pbr::OriginalName("RSmaller")] Rsmaller = 5,
    /// <summary>
    /// value &lt;= left
    /// </summary>
    [pbr::OriginalName("RSmallerEqual")] RsmallerEqual = 6,
    /// <summary>
    /// 并且
    /// </summary>
    [pbr::OriginalName("RAnd")] Rand = 7,
    /// <summary>
    /// 或
    /// </summary>
    [pbr::OriginalName("ROr")] Ror = 8,
  }

  public enum ECompareOp {
    /// <summary>
    /// value == left
    /// </summary>
    [pbr::OriginalName("Equal")] Equal = 1,
    /// <summary>
    /// value != left
    /// </summary>
    [pbr::OriginalName("NotEqual")] NotEqual = 2,
    /// <summary>
    /// value > left
    /// </summary>
    [pbr::OriginalName("Greater")] Greater = 3,
    /// <summary>
    /// value >= left
    /// </summary>
    [pbr::OriginalName("GreaterEqual")] GreaterEqual = 4,
    /// <summary>
    /// value &lt; left
    /// </summary>
    [pbr::OriginalName("Smaller")] Smaller = 5,
    /// <summary>
    /// value &lt;= left
    /// </summary>
    [pbr::OriginalName("SmallerEqual")] SmallerEqual = 6,
    /// <summary>
    /// left &lt; value &lt; right 
    /// </summary>
    [pbr::OriginalName("Between")] Between = 7,
    /// <summary>
    /// left &lt;= value &lt;= right
    /// </summary>
    [pbr::OriginalName("BetweenEqual")] BetweenEqual = 8,
  }

  public enum ETimeRange {
    /// <summary>
    /// 普通模式，有op和left，right组成
    /// </summary>
    [pbr::OriginalName("Normal")] Normal = 1,
    /// <summary>
    /// 最近多少 用left做参数
    /// </summary>
    [pbr::OriginalName("Span")] Span = 2,
    /// <summary>
    /// 今年
    /// </summary>
    [pbr::OriginalName("ThisYear")] ThisYear = 3,
    /// <summary>
    /// 上年
    /// </summary>
    [pbr::OriginalName("LastYear")] LastYear = 4,
    /// <summary>
    /// 今月
    /// </summary>
    [pbr::OriginalName("ThisMonth")] ThisMonth = 5,
    /// <summary>
    /// 上月
    /// </summary>
    [pbr::OriginalName("LastMonth")] LastMonth = 6,
    [pbr::OriginalName("ThisWeek")] ThisWeek = 7,
    [pbr::OriginalName("LastWeek")] LastWeek = 8,
    [pbr::OriginalName("Today")] Today = 9,
    [pbr::OriginalName("Yestoday")] Yestoday = 10,
    /// <summary>
    /// 所有
    /// </summary>
    [pbr::OriginalName("All")] All = 11,
  }

  #endregion

  #region Messages
  public sealed partial class DateTimeDM : pb::IMessage<DateTimeDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DateTimeDM> _parser = new pb::MessageParser<DateTimeDM>(() => new DateTimeDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DateTimeDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimeDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimeDM(DateTimeDM other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimeDM Clone() {
      return new DateTimeDM(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DateTimeDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DateTimeDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DateTimeDM other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimeSpanDM : pb::IMessage<TimeSpanDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeSpanDM> _parser = new pb::MessageParser<TimeSpanDM>(() => new TimeSpanDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSpanDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSpanDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSpanDM(TimeSpanDM other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSpanDM Clone() {
      return new TimeSpanDM(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSpanDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSpanDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSpanDM other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RangeDM : pb::IMessage<RangeDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RangeDM> _parser = new pb::MessageParser<RangeDM>(() => new RangeDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeDM(RangeDM other) : this() {
      _hasBits0 = other._hasBits0;
      Operator_ = other.Operator_;
      Operand_ = other.Operand_ != null ? other.Operand_.Clone() : null;
      Operand2_ = other.Operand2_ != null ? other.Operand2_.Clone() : null;
      Other_ = other.Other_ != null ? other.Other_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeDM Clone() {
      return new RangeDM(this);
    }

    /// <summary>Field number for the "_operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private readonly static global::DataModel.ERangeOp OperatorDefaultValue = global::DataModel.ERangeOp.Requal;

    private global::DataModel.ERangeOp Operator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ERangeOp Operator {
      get { if ((_hasBits0 & 1) != 0) { return Operator_; } else { return OperatorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        Operator_ = value;
      }
    }
    /// <summary>Gets whether the "_operator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOperator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "_operator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "_operand" field.</summary>
    public const int OperandFieldNumber = 2;
    private global::DataModel.VarDM Operand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.VarDM Operand {
      get { return Operand_; }
      set {
        Operand_ = value;
      }
    }

    /// <summary>Field number for the "_operand2" field.</summary>
    public const int Operand2FieldNumber = 3;
    private global::DataModel.RangeDM Operand2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.RangeDM Operand2 {
      get { return Operand2_; }
      set {
        Operand2_ = value;
      }
    }

    /// <summary>Field number for the "_other" field.</summary>
    public const int OtherFieldNumber = 4;
    private global::DataModel.RangeDM Other_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.RangeDM Other {
      get { return Other_; }
      set {
        Other_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (!object.Equals(Operand, other.Operand)) return false;
      if (!object.Equals(Operand2, other.Operand2)) return false;
      if (!object.Equals(Other, other.Other)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOperator) hash ^= Operator.GetHashCode();
      if (Operand_ != null) hash ^= Operand.GetHashCode();
      if (Operand2_ != null) hash ^= Operand2.GetHashCode();
      if (Other_ != null) hash ^= Other.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOperator) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (Operand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operand);
      }
      if (Operand2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Operand2);
      }
      if (Other_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Other);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOperator) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (Operand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operand);
      }
      if (Operand2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Operand2);
      }
      if (Other_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Other);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOperator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (Operand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operand);
      }
      if (Operand2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operand2);
      }
      if (Other_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeDM other) {
      if (other == null) {
        return;
      }
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.Operand_ != null) {
        if (Operand_ == null) {
          Operand = new global::DataModel.VarDM();
        }
        Operand.MergeFrom(other.Operand);
      }
      if (other.Operand2_ != null) {
        if (Operand2_ == null) {
          Operand2 = new global::DataModel.RangeDM();
        }
        Operand2.MergeFrom(other.Operand2);
      }
      if (other.Other_ != null) {
        if (Other_ == null) {
          Other = new global::DataModel.RangeDM();
        }
        Other.MergeFrom(other.Other);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Operator = (global::DataModel.ERangeOp) input.ReadEnum();
            break;
          }
          case 18: {
            if (Operand_ == null) {
              Operand = new global::DataModel.VarDM();
            }
            input.ReadMessage(Operand);
            break;
          }
          case 26: {
            if (Operand2_ == null) {
              Operand2 = new global::DataModel.RangeDM();
            }
            input.ReadMessage(Operand2);
            break;
          }
          case 34: {
            if (Other_ == null) {
              Other = new global::DataModel.RangeDM();
            }
            input.ReadMessage(Other);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Operator = (global::DataModel.ERangeOp) input.ReadEnum();
            break;
          }
          case 18: {
            if (Operand_ == null) {
              Operand = new global::DataModel.VarDM();
            }
            input.ReadMessage(Operand);
            break;
          }
          case 26: {
            if (Operand2_ == null) {
              Operand2 = new global::DataModel.RangeDM();
            }
            input.ReadMessage(Operand2);
            break;
          }
          case 34: {
            if (Other_ == null) {
              Other = new global::DataModel.RangeDM();
            }
            input.ReadMessage(Other);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NumRange : pb::IMessage<NumRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NumRange> _parser = new pb::MessageParser<NumRange>(() => new NumRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumRange(NumRange other) : this() {
      _hasBits0 = other._hasBits0;
      op_ = other.op_;
      left_ = other.left_;
      right_ = other.right_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumRange Clone() {
      return new NumRange(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private readonly static global::DataModel.ECompareOp OpDefaultValue = global::DataModel.ECompareOp.Equal;

    private global::DataModel.ECompareOp op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECompareOp Op {
      get { if ((_hasBits0 & 1) != 0) { return op_; } else { return OpDefaultValue; } }
      set {
        _hasBits0 |= 1;
        op_ = value;
      }
    }
    /// <summary>Gets whether the "op" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "op" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private readonly static double LeftDefaultValue = 0D;

    private double left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Left {
      get { if ((_hasBits0 & 2) != 0) { return left_; } else { return LeftDefaultValue; } }
      set {
        _hasBits0 |= 2;
        left_ = value;
      }
    }
    /// <summary>Gets whether the "left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeft {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeft() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private readonly static double RightDefaultValue = 0D;

    private double right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Right {
      get { if ((_hasBits0 & 4) != 0) { return right_; } else { return RightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        right_ = value;
      }
    }
    /// <summary>Gets whether the "right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRight() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Left, other.Left)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Right, other.Right)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOp) hash ^= Op.GetHashCode();
      if (HasLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Left);
      if (HasRight) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Right);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (HasLeft) {
        output.WriteRawTag(17);
        output.WriteDouble(Left);
      }
      if (HasRight) {
        output.WriteRawTag(25);
        output.WriteDouble(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (HasLeft) {
        output.WriteRawTag(17);
        output.WriteDouble(Left);
      }
      if (HasRight) {
        output.WriteRawTag(25);
        output.WriteDouble(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (HasLeft) {
        size += 1 + 8;
      }
      if (HasRight) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumRange other) {
      if (other == null) {
        return;
      }
      if (other.HasOp) {
        Op = other.Op;
      }
      if (other.HasLeft) {
        Left = other.Left;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::DataModel.ECompareOp) input.ReadEnum();
            break;
          }
          case 17: {
            Left = input.ReadDouble();
            break;
          }
          case 25: {
            Right = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Op = (global::DataModel.ECompareOp) input.ReadEnum();
            break;
          }
          case 17: {
            Left = input.ReadDouble();
            break;
          }
          case 25: {
            Right = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FontDM : pb::IMessage<FontDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FontDM> _parser = new pb::MessageParser<FontDM>(() => new FontDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontDM(FontDM other) : this() {
      _hasBits0 = other._hasBits0;
      face_ = other.face_;
      size_ = other.size_;
      color_ = other.color_;
      bold_ = other.bold_;
      italic_ = other.italic_;
      underline_ = other.underline_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontDM Clone() {
      return new FontDM(this);
    }

    /// <summary>Field number for the "face" field.</summary>
    public const int FaceFieldNumber = 1;
    private readonly static string FaceDefaultValue = "";

    private string face_;
    /// <summary>
    /// 字体名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Face {
      get { return face_ ?? FaceDefaultValue; }
      set {
        face_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "face" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFace {
      get { return face_ != null; }
    }
    /// <summary>Clears the value of the "face" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFace() {
      face_ = null;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private readonly static double SizeDefaultValue = 0D;

    private double size_;
    /// <summary>
    /// 字号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { if ((_hasBits0 & 1) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private readonly static int ColorDefaultValue = 0;

    private int color_;
    /// <summary>
    /// 颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { if ((_hasBits0 & 2) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bold" field.</summary>
    public const int BoldFieldNumber = 4;
    private readonly static bool BoldDefaultValue = false;

    private bool bold_;
    /// <summary>
    ///粗体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bold {
      get { if ((_hasBits0 & 4) != 0) { return bold_; } else { return BoldDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bold_ = value;
      }
    }
    /// <summary>Gets whether the "bold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBold {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBold() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "italic" field.</summary>
    public const int ItalicFieldNumber = 5;
    private readonly static bool ItalicDefaultValue = false;

    private bool italic_;
    /// <summary>
    ///斜体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Italic {
      get { if ((_hasBits0 & 8) != 0) { return italic_; } else { return ItalicDefaultValue; } }
      set {
        _hasBits0 |= 8;
        italic_ = value;
      }
    }
    /// <summary>Gets whether the "italic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItalic {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "italic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItalic() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "underline" field.</summary>
    public const int UnderlineFieldNumber = 6;
    private readonly static bool UnderlineDefaultValue = false;

    private bool underline_;
    /// <summary>
    ///下划线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Underline {
      get { if ((_hasBits0 & 16) != 0) { return underline_; } else { return UnderlineDefaultValue; } }
      set {
        _hasBits0 |= 16;
        underline_ = value;
      }
    }
    /// <summary>Gets whether the "underline" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnderline {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "underline" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnderline() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Face != other.Face) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Size, other.Size)) return false;
      if (Color != other.Color) return false;
      if (Bold != other.Bold) return false;
      if (Italic != other.Italic) return false;
      if (Underline != other.Underline) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFace) hash ^= Face.GetHashCode();
      if (HasSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Size);
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasBold) hash ^= Bold.GetHashCode();
      if (HasItalic) hash ^= Italic.GetHashCode();
      if (HasUnderline) hash ^= Underline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFace) {
        output.WriteRawTag(10);
        output.WriteString(Face);
      }
      if (HasSize) {
        output.WriteRawTag(17);
        output.WriteDouble(Size);
      }
      if (HasColor) {
        output.WriteRawTag(24);
        output.WriteInt32(Color);
      }
      if (HasBold) {
        output.WriteRawTag(32);
        output.WriteBool(Bold);
      }
      if (HasItalic) {
        output.WriteRawTag(40);
        output.WriteBool(Italic);
      }
      if (HasUnderline) {
        output.WriteRawTag(48);
        output.WriteBool(Underline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFace) {
        output.WriteRawTag(10);
        output.WriteString(Face);
      }
      if (HasSize) {
        output.WriteRawTag(17);
        output.WriteDouble(Size);
      }
      if (HasColor) {
        output.WriteRawTag(24);
        output.WriteInt32(Color);
      }
      if (HasBold) {
        output.WriteRawTag(32);
        output.WriteBool(Bold);
      }
      if (HasItalic) {
        output.WriteRawTag(40);
        output.WriteBool(Italic);
      }
      if (HasUnderline) {
        output.WriteRawTag(48);
        output.WriteBool(Underline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFace) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Face);
      }
      if (HasSize) {
        size += 1 + 8;
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (HasBold) {
        size += 1 + 1;
      }
      if (HasItalic) {
        size += 1 + 1;
      }
      if (HasUnderline) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontDM other) {
      if (other == null) {
        return;
      }
      if (other.HasFace) {
        Face = other.Face;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasBold) {
        Bold = other.Bold;
      }
      if (other.HasItalic) {
        Italic = other.Italic;
      }
      if (other.HasUnderline) {
        Underline = other.Underline;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Face = input.ReadString();
            break;
          }
          case 17: {
            Size = input.ReadDouble();
            break;
          }
          case 24: {
            Color = input.ReadInt32();
            break;
          }
          case 32: {
            Bold = input.ReadBool();
            break;
          }
          case 40: {
            Italic = input.ReadBool();
            break;
          }
          case 48: {
            Underline = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Face = input.ReadString();
            break;
          }
          case 17: {
            Size = input.ReadDouble();
            break;
          }
          case 24: {
            Color = input.ReadInt32();
            break;
          }
          case 32: {
            Bold = input.ReadBool();
            break;
          }
          case 40: {
            Italic = input.ReadBool();
            break;
          }
          case 48: {
            Underline = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimeRange : pb::IMessage<TimeRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeRange> _parser = new pb::MessageParser<TimeRange>(() => new TimeRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange(TimeRange other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      op_ = other.op_;
      leftTick_ = other.leftTick_;
      rightTick_ = other.rightTick_;
      intradayStartTick_ = other.intradayStartTick_;
      intradayEndTick_ = other.intradayEndTick_;
      weekDay_ = other.weekDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange Clone() {
      return new TimeRange(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::DataModel.ETimeRange TypeDefaultValue = global::DataModel.ETimeRange.Normal;

    private global::DataModel.ETimeRange type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ETimeRange Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private readonly static global::DataModel.ECompareOp OpDefaultValue = global::DataModel.ECompareOp.Equal;

    private global::DataModel.ECompareOp op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECompareOp Op {
      get { if ((_hasBits0 & 2) != 0) { return op_; } else { return OpDefaultValue; } }
      set {
        _hasBits0 |= 2;
        op_ = value;
      }
    }
    /// <summary>Gets whether the "op" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "op" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leftTick" field.</summary>
    public const int LeftTickFieldNumber = 3;
    private readonly static long LeftTickDefaultValue = 0L;

    private long leftTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeftTick {
      get { if ((_hasBits0 & 4) != 0) { return leftTick_; } else { return LeftTickDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leftTick_ = value;
      }
    }
    /// <summary>Gets whether the "leftTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftTick {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leftTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftTick() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rightTick" field.</summary>
    public const int RightTickFieldNumber = 4;
    private readonly static long RightTickDefaultValue = 0L;

    private long rightTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RightTick {
      get { if ((_hasBits0 & 8) != 0) { return rightTick_; } else { return RightTickDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rightTick_ = value;
      }
    }
    /// <summary>Gets whether the "rightTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightTick {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rightTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightTick() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "intradayStartTick" field.</summary>
    public const int IntradayStartTickFieldNumber = 5;
    private readonly static long IntradayStartTickDefaultValue = 0L;

    private long intradayStartTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntradayStartTick {
      get { if ((_hasBits0 & 16) != 0) { return intradayStartTick_; } else { return IntradayStartTickDefaultValue; } }
      set {
        _hasBits0 |= 16;
        intradayStartTick_ = value;
      }
    }
    /// <summary>Gets whether the "intradayStartTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntradayStartTick {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "intradayStartTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntradayStartTick() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "intradayEndTick" field.</summary>
    public const int IntradayEndTickFieldNumber = 6;
    private readonly static long IntradayEndTickDefaultValue = 0L;

    private long intradayEndTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntradayEndTick {
      get { if ((_hasBits0 & 32) != 0) { return intradayEndTick_; } else { return IntradayEndTickDefaultValue; } }
      set {
        _hasBits0 |= 32;
        intradayEndTick_ = value;
      }
    }
    /// <summary>Gets whether the "intradayEndTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntradayEndTick {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "intradayEndTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntradayEndTick() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "weekDay" field.</summary>
    public const int WeekDayFieldNumber = 7;
    private readonly static global::DataModel.EWeek WeekDayDefaultValue = global::DataModel.EWeek.Monday;

    private global::DataModel.EWeek weekDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EWeek WeekDay {
      get { if ((_hasBits0 & 64) != 0) { return weekDay_; } else { return WeekDayDefaultValue; } }
      set {
        _hasBits0 |= 64;
        weekDay_ = value;
      }
    }
    /// <summary>Gets whether the "weekDay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeekDay {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "weekDay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeekDay() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Op != other.Op) return false;
      if (LeftTick != other.LeftTick) return false;
      if (RightTick != other.RightTick) return false;
      if (IntradayStartTick != other.IntradayStartTick) return false;
      if (IntradayEndTick != other.IntradayEndTick) return false;
      if (WeekDay != other.WeekDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasOp) hash ^= Op.GetHashCode();
      if (HasLeftTick) hash ^= LeftTick.GetHashCode();
      if (HasRightTick) hash ^= RightTick.GetHashCode();
      if (HasIntradayStartTick) hash ^= IntradayStartTick.GetHashCode();
      if (HasIntradayEndTick) hash ^= IntradayEndTick.GetHashCode();
      if (HasWeekDay) hash ^= WeekDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasOp) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Op);
      }
      if (HasLeftTick) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftTick);
      }
      if (HasRightTick) {
        output.WriteRawTag(32);
        output.WriteInt64(RightTick);
      }
      if (HasIntradayStartTick) {
        output.WriteRawTag(40);
        output.WriteInt64(IntradayStartTick);
      }
      if (HasIntradayEndTick) {
        output.WriteRawTag(48);
        output.WriteInt64(IntradayEndTick);
      }
      if (HasWeekDay) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WeekDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasOp) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Op);
      }
      if (HasLeftTick) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftTick);
      }
      if (HasRightTick) {
        output.WriteRawTag(32);
        output.WriteInt64(RightTick);
      }
      if (HasIntradayStartTick) {
        output.WriteRawTag(40);
        output.WriteInt64(IntradayStartTick);
      }
      if (HasIntradayEndTick) {
        output.WriteRawTag(48);
        output.WriteInt64(IntradayEndTick);
      }
      if (HasWeekDay) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WeekDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasOp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (HasLeftTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftTick);
      }
      if (HasRightTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RightTick);
      }
      if (HasIntradayStartTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntradayStartTick);
      }
      if (HasIntradayEndTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntradayEndTick);
      }
      if (HasWeekDay) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WeekDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeRange other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasOp) {
        Op = other.Op;
      }
      if (other.HasLeftTick) {
        LeftTick = other.LeftTick;
      }
      if (other.HasRightTick) {
        RightTick = other.RightTick;
      }
      if (other.HasIntradayStartTick) {
        IntradayStartTick = other.IntradayStartTick;
      }
      if (other.HasIntradayEndTick) {
        IntradayEndTick = other.IntradayEndTick;
      }
      if (other.HasWeekDay) {
        WeekDay = other.WeekDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::DataModel.ETimeRange) input.ReadEnum();
            break;
          }
          case 16: {
            Op = (global::DataModel.ECompareOp) input.ReadEnum();
            break;
          }
          case 24: {
            LeftTick = input.ReadInt64();
            break;
          }
          case 32: {
            RightTick = input.ReadInt64();
            break;
          }
          case 40: {
            IntradayStartTick = input.ReadInt64();
            break;
          }
          case 48: {
            IntradayEndTick = input.ReadInt64();
            break;
          }
          case 56: {
            WeekDay = (global::DataModel.EWeek) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::DataModel.ETimeRange) input.ReadEnum();
            break;
          }
          case 16: {
            Op = (global::DataModel.ECompareOp) input.ReadEnum();
            break;
          }
          case 24: {
            LeftTick = input.ReadInt64();
            break;
          }
          case 32: {
            RightTick = input.ReadInt64();
            break;
          }
          case 40: {
            IntradayStartTick = input.ReadInt64();
            break;
          }
          case 48: {
            IntradayEndTick = input.ReadInt64();
            break;
          }
          case 56: {
            WeekDay = (global::DataModel.EWeek) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorRangeItem : pb::IMessage<ColorRangeItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRangeItem> _parser = new pb::MessageParser<ColorRangeItem>(() => new ColorRangeItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorRangeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRangeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRangeItem(ColorRangeItem other) : this() {
      _hasBits0 = other._hasBits0;
      range_ = other.range_ != null ? other.range_.Clone() : null;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRangeItem Clone() {
      return new ColorRangeItem(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private global::DataModel.NumRange range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.NumRange Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private readonly static int ColorDefaultValue = 0;

    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorRangeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorRangeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Range, other.Range)) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (range_ != null) hash ^= Range.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (range_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Range);
      }
      if (HasColor) {
        output.WriteRawTag(24);
        output.WriteInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (range_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Range);
      }
      if (HasColor) {
        output.WriteRawTag(24);
        output.WriteInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorRangeItem other) {
      if (other == null) {
        return;
      }
      if (other.range_ != null) {
        if (range_ == null) {
          Range = new global::DataModel.NumRange();
        }
        Range.MergeFrom(other.Range);
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (range_ == null) {
              Range = new global::DataModel.NumRange();
            }
            input.ReadMessage(Range);
            break;
          }
          case 24: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (range_ == null) {
              Range = new global::DataModel.NumRange();
            }
            input.ReadMessage(Range);
            break;
          }
          case 24: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorRange : pb::IMessage<ColorRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRange> _parser = new pb::MessageParser<ColorRange>(() => new ColorRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRange(ColorRange other) : this() {
      ranges_ = other.ranges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRange Clone() {
      return new ColorRange(this);
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataModel.ColorRangeItem> _repeated_ranges_codec
        = pb::FieldCodec.ForMessage(10, global::DataModel.ColorRangeItem.Parser);
    private readonly pbc::RepeatedField<global::DataModel.ColorRangeItem> ranges_ = new pbc::RepeatedField<global::DataModel.ColorRangeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataModel.ColorRangeItem> Ranges {
      get { return ranges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ranges_.Equals(other.ranges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ranges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ranges_.WriteTo(output, _repeated_ranges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ranges_.WriteTo(ref output, _repeated_ranges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorRange other) {
      if (other == null) {
        return;
      }
      ranges_.Add(other.ranges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ranges_.AddEntriesFrom(ref input, _repeated_ranges_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///message VarDM       // 普适性对象，提供Value{get;set;}, 比较耗性能，除非确实需要否则不用 // 目前主要用于xmlWriter
  ///{
  ///    required EProtoDataType  type    = 1;
  ///    optional int32      int32    = 2;
  ///    optional int64      int64    = 3;
  ///    optional uint32     uint32   = 4;
  ///    optional uint64     uint64   = 5;
  ///    optional float      single   = 6;
  ///    optional double     double   = 7;
  ///    optional string     string   = 8;
  ///    optional NumRange   _numRange    = 9;
  ///    optional TimeRange  timerange = 10;
  ///    optional RangeDM    _range	= 11;
  ///    optional bytes      user     = 12;		// 用户提供Tostring和string构造函数
  ///    optional bool      userIsList = 13;	// 用户对象是否作为list存在
  ///    optional ColorRange   _colorRange    = 14;
  ///}
  /// </summary>
  public sealed partial class VarDM : pb::IMessage<VarDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VarDM> _parser = new pb::MessageParser<VarDM>(() => new VarDM());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDM(VarDM other) : this() {
      val_ = other.val_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDM Clone() {
      return new VarDM(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private readonly static string ValDefaultValue = "";

    private string val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Val {
      get { return val_ ?? ValDefaultValue; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVal {
      get { return val_ != null; }
    }
    /// <summary>Clears the value of the "val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVal() {
      val_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Val != other.Val) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVal) hash ^= Val.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVal) {
        output.WriteRawTag(10);
        output.WriteString(Val);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVal) {
        output.WriteRawTag(10);
        output.WriteString(Val);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarDM other) {
      if (other == null) {
        return;
      }
      if (other.HasVal) {
        Val = other.Val;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Val = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Val = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///enum EParaType
  ///{
  ///    ParaNone       = 0;            // An invisible line.
  ///    int      = 1;            // A solid line.
  ///}
  /// </summary>
  public sealed partial class ParaDM : pb::IMessage<ParaDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParaDM> _parser = new pb::MessageParser<ParaDM>(() => new ParaDM());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParaDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParaDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParaDM(ParaDM other) : this() {
      name_ = other.name_;
      group_ = other.group_;
      desc_ = other.desc_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      presets_ = other.presets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParaDM Clone() {
      return new ParaDM(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///    required EParaType  type    = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private readonly static string GroupDefaultValue = "";

    private string group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Group {
      get { return group_ ?? GroupDefaultValue; }
      set {
        group_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "group" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return group_ != null; }
    }
    /// <summary>Clears the value of the "group" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      group_ = null;
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private readonly static string DescDefaultValue = "";

    private string desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_ ?? DescDefaultValue; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesc {
      get { return desc_ != null; }
    }
    /// <summary>Clears the value of the "desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesc() {
      desc_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private global::DataModel.VarDM value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.VarDM Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "presets" field.</summary>
    public const int PresetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DataModel.VarDM> _repeated_presets_codec
        = pb::FieldCodec.ForMessage(42, global::DataModel.VarDM.Parser);
    private readonly pbc::RepeatedField<global::DataModel.VarDM> presets_ = new pbc::RepeatedField<global::DataModel.VarDM>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataModel.VarDM> Presets {
      get { return presets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParaDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParaDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Group != other.Group) return false;
      if (Desc != other.Desc) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if(!presets_.Equals(other.presets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (HasDesc) hash ^= Desc.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      hash ^= presets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasGroup) {
        output.WriteRawTag(18);
        output.WriteString(Group);
      }
      if (HasDesc) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (value_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Value);
      }
      presets_.WriteTo(output, _repeated_presets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasGroup) {
        output.WriteRawTag(18);
        output.WriteString(Group);
      }
      if (HasDesc) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (value_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Value);
      }
      presets_.WriteTo(ref output, _repeated_presets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Group);
      }
      if (HasDesc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      size += presets_.CalculateSize(_repeated_presets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParaDM other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasGroup) {
        Group = other.Group;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::DataModel.VarDM();
        }
        Value.MergeFrom(other.Value);
      }
      presets_.Add(other.presets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Group = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            if (value_ == null) {
              Value = new global::DataModel.VarDM();
            }
            input.ReadMessage(Value);
            break;
          }
          case 42: {
            presets_.AddEntriesFrom(input, _repeated_presets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Group = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            if (value_ == null) {
              Value = new global::DataModel.VarDM();
            }
            input.ReadMessage(Value);
            break;
          }
          case 42: {
            presets_.AddEntriesFrom(ref input, _repeated_presets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KVDM : pb::IMessage<KVDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KVDM> _parser = new pb::MessageParser<KVDM>(() => new KVDM());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.CommonDmReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVDM(KVDM other) : this() {
      key_ = other.key_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      nestings_ = other.nestings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVDM Clone() {
      return new KVDM(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::DataModel.VarDM value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.VarDM Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "nestings" field.</summary>
    public const int NestingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataModel.KVDM> _repeated_nestings_codec
        = pb::FieldCodec.ForMessage(26, global::DataModel.KVDM.Parser);
    private readonly pbc::RepeatedField<global::DataModel.KVDM> nestings_ = new pbc::RepeatedField<global::DataModel.KVDM>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataModel.KVDM> Nestings {
      get { return nestings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if(!nestings_.Equals(other.nestings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      hash ^= nestings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      nestings_.WriteTo(output, _repeated_nestings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      nestings_.WriteTo(ref output, _repeated_nestings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      size += nestings_.CalculateSize(_repeated_nestings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVDM other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::DataModel.VarDM();
        }
        Value.MergeFrom(other.Value);
      }
      nestings_.Add(other.nestings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::DataModel.VarDM();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            nestings_.AddEntriesFrom(input, _repeated_nestings_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::DataModel.VarDM();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            nestings_.AddEntriesFrom(ref input, _repeated_nestings_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
