// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/LibModels/AccountDM.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataModel {

  /// <summary>Holder for reflection information generated from Protos/LibModels/AccountDM.proto</summary>
  public static partial class AccountDMReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/LibModels/AccountDM.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountDMReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBQcm90b3MvTGliTW9kZWxzL0FjY291bnRETS5wcm90bxIJRGF0YU1vZGVs",
            "ItsDCglBY2NvdW50RE0SCgoCSUQYASACKAkSKQoIYXV0aFR5cGUYAiABKA4y",
            "Fy5EYXRhTW9kZWwuRUFjY291bnRBdXRoEgwKBG5hbWUYAyABKAkSEAoIcGFz",
            "c3dvcmQYBCABKAkSEAoIbmlja05hbWUYBSABKAkSCwoDdGFnGAYgASgJEg4K",
            "BmdlbmRlchgHIAEoCBIQCghiaXJ0aERheRgIIAEoAxIQCghkaXN0cmljdBgJ",
            "IAEoCRINCgVwaG90bxgKIAEoCRINCgVlbWFpbBgLIAEoCRINCgVwaG9uZRgM",
            "IAEoCRIPCgdyZWdDb2RlGA4gASgJEhQKDHJlZ2lzdGVyVGltZRgVIAEoAxIR",
            "Cgl0b3RhbFRpbWUYFiABKAMSFQoNbGFzdExvZ2luVGltZRgXIAEoAxIUCgxs",
            "YXN0U3RheVRpbWUYGCABKAMSEgoKbG9naW5UaW1lcxgZIAEoBBINCgVsZXZl",
            "bBgfIAEoBRILCgNleHAYICABKAISGgoScGF5ZWVBbGlwYXlBY2NvdW50GCMg",
            "ASgJEg8KB2FnZW50SUQYJCABKAQSCwoDdmlwGCggAigFEhUKDXZpcEV4cGly",
            "ZURhdGUYKSABKAMSDwoHdmlwTGVmdBgqIAEoAyI6Cg9TaW1wbGVBY2NvdW50",
            "RE0SCgoCSUQYASACKAkSDAoEbmFtZRgDIAEoCRINCgVwaG90bxgKIAEoCSJO",
            "CglSZWdjb2RlRE0SCgoCSUQYASACKAMSDAoEQ29kZRgCIAIoCRIUCgxHZW5B",
            "Y2NvdW50SUQYAyACKAkSEQoJQWNjb3VudElEGAQgASgJKjwKDEVBY2NvdW50",
            "QXV0aBIOCgpBdXRoTm9ybWFsEAESDQoJQXV0aEFnZW50EAISDQoJQXV0aEFk",
            "bWluEAQqygEKC0VFcnJBY2NvdW50Eh0KGEFjY291bnRDcmVhdGVOYW1lVG9v",
            "TG9uZxDpBxIcChdBY2NvdW50Q3JlYXRlUHdkVG9vTG9uZxDqBxIbChZBY2Nv",
            "dW50Q3JlYXRlRHVwbGljYXRlEOsHEhwKF0FjY291bnRDcmVhdGVSZWdjb2Rl",
            "RXJyEOwHEhQKD0FjY291bnROb3RFeGlzdBDuBxIbChZBY2NvdW50TG9naW5J",
            "bnZhbGlkUHdkEO8HEhAKC0RhdGFCYXNlRXJyEPAH"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataModel.EAccountAuth), typeof(global::DataModel.EErrAccount), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.AccountDM), global::DataModel.AccountDM.Parser, new[]{ "ID", "AuthType", "Name", "Password", "NickName", "Tag", "Gender", "BirthDay", "District", "Photo", "Email", "Phone", "RegCode", "RegisterTime", "TotalTime", "LastLoginTime", "LastStayTime", "LoginTimes", "Level", "Exp", "PayeeAlipayAccount", "AgentID", "Vip", "VipExpireDate", "VipLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.SimpleAccountDM), global::DataModel.SimpleAccountDM.Parser, new[]{ "ID", "Name", "Photo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.RegcodeDM), global::DataModel.RegcodeDM.Parser, new[]{ "ID", "Code", "GenAccountID", "AccountID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EAccountAuth {
    /// <summary>
    /// 普通用户
    /// </summary>
    [pbr::OriginalName("AuthNormal")] AuthNormal = 1,
    /// <summary>
    /// 代理用户
    /// </summary>
    [pbr::OriginalName("AuthAgent")] AuthAgent = 2,
    /// <summary>
    /// 管理用户
    /// </summary>
    [pbr::OriginalName("AuthAdmin")] AuthAdmin = 4,
  }

  public enum EErrAccount {
    /// <summary>
    /// 名字太长
    /// </summary>
    [pbr::OriginalName("AccountCreateNameTooLong")] AccountCreateNameTooLong = 1001,
    /// <summary>
    /// 密码太长
    /// </summary>
    [pbr::OriginalName("AccountCreatePwdTooLong")] AccountCreatePwdTooLong = 1002,
    /// <summary>
    /// 已存在账户
    /// </summary>
    [pbr::OriginalName("AccountCreateDuplicate")] AccountCreateDuplicate = 1003,
    /// <summary>
    /// 注册码有问题
    /// </summary>
    [pbr::OriginalName("AccountCreateRegcodeErr")] AccountCreateRegcodeErr = 1004,
    /// <summary>
    /// 登录
    /// </summary>
    [pbr::OriginalName("AccountNotExist")] AccountNotExist = 1006,
    /// <summary>
    /// 密码错误
    /// </summary>
    [pbr::OriginalName("AccountLoginInvalidPwd")] AccountLoginInvalidPwd = 1007,
    /// <summary>
    /// 数据库错误
    /// </summary>
    [pbr::OriginalName("DataBaseErr")] DataBaseErr = 1008,
  }

  #endregion

  #region Messages
  public sealed partial class AccountDM : pb::IMessage<AccountDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountDM> _parser = new pb::MessageParser<AccountDM>(() => new AccountDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.AccountDMReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDM(AccountDM other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      authType_ = other.authType_;
      name_ = other.name_;
      password_ = other.password_;
      nickName_ = other.nickName_;
      tag_ = other.tag_;
      gender_ = other.gender_;
      birthDay_ = other.birthDay_;
      district_ = other.district_;
      photo_ = other.photo_;
      email_ = other.email_;
      phone_ = other.phone_;
      regCode_ = other.regCode_;
      registerTime_ = other.registerTime_;
      totalTime_ = other.totalTime_;
      lastLoginTime_ = other.lastLoginTime_;
      lastStayTime_ = other.lastStayTime_;
      loginTimes_ = other.loginTimes_;
      level_ = other.level_;
      exp_ = other.exp_;
      payeeAlipayAccount_ = other.payeeAlipayAccount_;
      agentID_ = other.agentID_;
      vip_ = other.vip_;
      vipExpireDate_ = other.vipExpireDate_;
      vipLeft_ = other.vipLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDM Clone() {
      return new AccountDM(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static string IDDefaultValue = "";

    private string iD_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_ ?? IDDefaultValue; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return iD_ != null; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      iD_ = null;
    }

    /// <summary>Field number for the "authType" field.</summary>
    public const int AuthTypeFieldNumber = 2;
    private readonly static global::DataModel.EAccountAuth AuthTypeDefaultValue = global::DataModel.EAccountAuth.AuthNormal;

    private global::DataModel.EAccountAuth authType_;
    /// <summary>
    ///账号类型EAccountType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EAccountAuth AuthType {
      get { if ((_hasBits0 & 1) != 0) { return authType_; } else { return AuthTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        authType_ = value;
      }
    }
    /// <summary>Gets whether the "authType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "authType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private readonly static string PasswordDefaultValue = "";

    private string password_;
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_ ?? PasswordDefaultValue; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "password" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return password_ != null; }
    }
    /// <summary>Clears the value of the "password" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassword() {
      password_ = null;
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 5;
    private readonly static string NickNameDefaultValue = "";

    private string nickName_;
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_ ?? NickNameDefaultValue; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nickName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNickName {
      get { return nickName_ != null; }
    }
    /// <summary>Clears the value of the "nickName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNickName() {
      nickName_ = null;
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 6;
    private readonly static string TagDefaultValue = "";

    private string tag_;
    /// <summary>
    ///个人标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_ ?? TagDefaultValue; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTag {
      get { return tag_ != null; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTag() {
      tag_ = null;
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private readonly static bool GenderDefaultValue = false;

    private bool gender_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gender {
      get { if ((_hasBits0 & 2) != 0) { return gender_; } else { return GenderDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gender_ = value;
      }
    }
    /// <summary>Gets whether the "gender" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGender {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gender" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGender() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "birthDay" field.</summary>
    public const int BirthDayFieldNumber = 8;
    private readonly static long BirthDayDefaultValue = 0L;

    private long birthDay_;
    /// <summary>
    ///生日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BirthDay {
      get { if ((_hasBits0 & 4) != 0) { return birthDay_; } else { return BirthDayDefaultValue; } }
      set {
        _hasBits0 |= 4;
        birthDay_ = value;
      }
    }
    /// <summary>Gets whether the "birthDay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBirthDay {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "birthDay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBirthDay() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "district" field.</summary>
    public const int DistrictFieldNumber = 9;
    private readonly static string DistrictDefaultValue = "";

    private string district_;
    /// <summary>
    /// 地区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string District {
      get { return district_ ?? DistrictDefaultValue; }
      set {
        district_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "district" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistrict {
      get { return district_ != null; }
    }
    /// <summary>Clears the value of the "district" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistrict() {
      district_ = null;
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 10;
    private readonly static string PhotoDefaultValue = "";

    private string photo_;
    /// <summary>
    /// 头像链接  -- todo: 以后再做
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Photo {
      get { return photo_ ?? PhotoDefaultValue; }
      set {
        photo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "photo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoto {
      get { return photo_ != null; }
    }
    /// <summary>Clears the value of the "photo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoto() {
      photo_ = null;
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 11;
    private readonly static string EmailDefaultValue = "";

    private string email_;
    /// <summary>
    ///邮件地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_ ?? EmailDefaultValue; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmail {
      get { return email_ != null; }
    }
    /// <summary>Clears the value of the "email" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmail() {
      email_ = null;
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 12;
    private readonly static string PhoneDefaultValue = "";

    private string phone_;
    /// <summary>
    ///手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_ ?? PhoneDefaultValue; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhone {
      get { return phone_ != null; }
    }
    /// <summary>Clears the value of the "phone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhone() {
      phone_ = null;
    }

    /// <summary>Field number for the "regCode" field.</summary>
    public const int RegCodeFieldNumber = 14;
    private readonly static string RegCodeDefaultValue = "";

    private string regCode_;
    /// <summary>
    /// 注册码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegCode {
      get { return regCode_ ?? RegCodeDefaultValue; }
      set {
        regCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "regCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegCode {
      get { return regCode_ != null; }
    }
    /// <summary>Clears the value of the "regCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegCode() {
      regCode_ = null;
    }

    /// <summary>Field number for the "registerTime" field.</summary>
    public const int RegisterTimeFieldNumber = 21;
    private readonly static long RegisterTimeDefaultValue = 0L;

    private long registerTime_;
    /// <summary>
    ///注册时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegisterTime {
      get { if ((_hasBits0 & 8) != 0) { return registerTime_; } else { return RegisterTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        registerTime_ = value;
      }
    }
    /// <summary>Gets whether the "registerTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegisterTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "registerTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegisterTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "totalTime" field.</summary>
    public const int TotalTimeFieldNumber = 22;
    private readonly static long TotalTimeDefaultValue = 0L;

    private long totalTime_;
    /// <summary>
    /// 总登录时间,涉及等级计算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTime {
      get { if ((_hasBits0 & 16) != 0) { return totalTime_; } else { return TotalTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        totalTime_ = value;
      }
    }
    /// <summary>Gets whether the "totalTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "totalTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "lastLoginTime" field.</summary>
    public const int LastLoginTimeFieldNumber = 23;
    private readonly static long LastLoginTimeDefaultValue = 0L;

    private long lastLoginTime_;
    /// <summary>
    /// 上次登录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLoginTime {
      get { if ((_hasBits0 & 32) != 0) { return lastLoginTime_; } else { return LastLoginTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lastLoginTime_ = value;
      }
    }
    /// <summary>Gets whether the "lastLoginTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastLoginTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lastLoginTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastLoginTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "lastStayTime" field.</summary>
    public const int LastStayTimeFieldNumber = 24;
    private readonly static long LastStayTimeDefaultValue = 0L;

    private long lastStayTime_;
    /// <summary>
    /// 上次停留时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastStayTime {
      get { if ((_hasBits0 & 64) != 0) { return lastStayTime_; } else { return LastStayTimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lastStayTime_ = value;
      }
    }
    /// <summary>Gets whether the "lastStayTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastStayTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "lastStayTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastStayTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "loginTimes" field.</summary>
    public const int LoginTimesFieldNumber = 25;
    private readonly static ulong LoginTimesDefaultValue = 0UL;

    private ulong loginTimes_;
    /// <summary>
    /// 总登录次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LoginTimes {
      get { if ((_hasBits0 & 128) != 0) { return loginTimes_; } else { return LoginTimesDefaultValue; } }
      set {
        _hasBits0 |= 128;
        loginTimes_ = value;
      }
    }
    /// <summary>Gets whether the "loginTimes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoginTimes {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "loginTimes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoginTimes() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 31;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { if ((_hasBits0 & 256) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 256;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 32;
    private readonly static float ExpDefaultValue = 0F;

    private float exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Exp {
      get { if ((_hasBits0 & 512) != 0) { return exp_; } else { return ExpDefaultValue; } }
      set {
        _hasBits0 |= 512;
        exp_ = value;
      }
    }
    /// <summary>Gets whether the "exp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExp {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "exp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExp() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "payeeAlipayAccount" field.</summary>
    public const int PayeeAlipayAccountFieldNumber = 35;
    private readonly static string PayeeAlipayAccountDefaultValue = "";

    private string payeeAlipayAccount_;
    /// <summary>
    ///支付宝收款账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayeeAlipayAccount {
      get { return payeeAlipayAccount_ ?? PayeeAlipayAccountDefaultValue; }
      set {
        payeeAlipayAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payeeAlipayAccount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayeeAlipayAccount {
      get { return payeeAlipayAccount_ != null; }
    }
    /// <summary>Clears the value of the "payeeAlipayAccount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayeeAlipayAccount() {
      payeeAlipayAccount_ = null;
    }

    /// <summary>Field number for the "agentID" field.</summary>
    public const int AgentIDFieldNumber = 36;
    private readonly static ulong AgentIDDefaultValue = 0UL;

    private ulong agentID_;
    /// <summary>
    ///推荐人id，涉及到利益分成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AgentID {
      get { if ((_hasBits0 & 1024) != 0) { return agentID_; } else { return AgentIDDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        agentID_ = value;
      }
    }
    /// <summary>Gets whether the "agentID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAgentID {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "agentID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAgentID() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 40;
    private readonly static int VipDefaultValue = 0;

    private int vip_;
    /// <summary>
    /// vip 等级, 普通用户默认0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { if ((_hasBits0 & 2048) != 0) { return vip_; } else { return VipDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        vip_ = value;
      }
    }
    /// <summary>Gets whether the "vip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVip {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "vip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVip() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "vipExpireDate" field.</summary>
    public const int VipExpireDateFieldNumber = 41;
    private readonly static long VipExpireDateDefaultValue = 0L;

    private long vipExpireDate_;
    /// <summary>
    /// vip 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VipExpireDate {
      get { if ((_hasBits0 & 4096) != 0) { return vipExpireDate_; } else { return VipExpireDateDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        vipExpireDate_ = value;
      }
    }
    /// <summary>Gets whether the "vipExpireDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVipExpireDate {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "vipExpireDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVipExpireDate() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "vipLeft" field.</summary>
    public const int VipLeftFieldNumber = 42;
    private readonly static long VipLeftDefaultValue = 0L;

    private long vipLeft_;
    /// <summary>
    /// vip 结束timespan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VipLeft {
      get { if ((_hasBits0 & 8192) != 0) { return vipLeft_; } else { return VipLeftDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        vipLeft_ = value;
      }
    }
    /// <summary>Gets whether the "vipLeft" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVipLeft {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "vipLeft" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVipLeft() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (AuthType != other.AuthType) return false;
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      if (NickName != other.NickName) return false;
      if (Tag != other.Tag) return false;
      if (Gender != other.Gender) return false;
      if (BirthDay != other.BirthDay) return false;
      if (District != other.District) return false;
      if (Photo != other.Photo) return false;
      if (Email != other.Email) return false;
      if (Phone != other.Phone) return false;
      if (RegCode != other.RegCode) return false;
      if (RegisterTime != other.RegisterTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if (LastLoginTime != other.LastLoginTime) return false;
      if (LastStayTime != other.LastStayTime) return false;
      if (LoginTimes != other.LoginTimes) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Exp, other.Exp)) return false;
      if (PayeeAlipayAccount != other.PayeeAlipayAccount) return false;
      if (AgentID != other.AgentID) return false;
      if (Vip != other.Vip) return false;
      if (VipExpireDate != other.VipExpireDate) return false;
      if (VipLeft != other.VipLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasAuthType) hash ^= AuthType.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasPassword) hash ^= Password.GetHashCode();
      if (HasNickName) hash ^= NickName.GetHashCode();
      if (HasTag) hash ^= Tag.GetHashCode();
      if (HasGender) hash ^= Gender.GetHashCode();
      if (HasBirthDay) hash ^= BirthDay.GetHashCode();
      if (HasDistrict) hash ^= District.GetHashCode();
      if (HasPhoto) hash ^= Photo.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasPhone) hash ^= Phone.GetHashCode();
      if (HasRegCode) hash ^= RegCode.GetHashCode();
      if (HasRegisterTime) hash ^= RegisterTime.GetHashCode();
      if (HasTotalTime) hash ^= TotalTime.GetHashCode();
      if (HasLastLoginTime) hash ^= LastLoginTime.GetHashCode();
      if (HasLastStayTime) hash ^= LastStayTime.GetHashCode();
      if (HasLoginTimes) hash ^= LoginTimes.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasExp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Exp);
      if (HasPayeeAlipayAccount) hash ^= PayeeAlipayAccount.GetHashCode();
      if (HasAgentID) hash ^= AgentID.GetHashCode();
      if (HasVip) hash ^= Vip.GetHashCode();
      if (HasVipExpireDate) hash ^= VipExpireDate.GetHashCode();
      if (HasVipLeft) hash ^= VipLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasID) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (HasAuthType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AuthType);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasPassword) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (HasNickName) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (HasTag) {
        output.WriteRawTag(50);
        output.WriteString(Tag);
      }
      if (HasGender) {
        output.WriteRawTag(56);
        output.WriteBool(Gender);
      }
      if (HasBirthDay) {
        output.WriteRawTag(64);
        output.WriteInt64(BirthDay);
      }
      if (HasDistrict) {
        output.WriteRawTag(74);
        output.WriteString(District);
      }
      if (HasPhoto) {
        output.WriteRawTag(82);
        output.WriteString(Photo);
      }
      if (HasEmail) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (HasPhone) {
        output.WriteRawTag(98);
        output.WriteString(Phone);
      }
      if (HasRegCode) {
        output.WriteRawTag(114);
        output.WriteString(RegCode);
      }
      if (HasRegisterTime) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RegisterTime);
      }
      if (HasTotalTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TotalTime);
      }
      if (HasLastLoginTime) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(LastLoginTime);
      }
      if (HasLastStayTime) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(LastStayTime);
      }
      if (HasLoginTimes) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(LoginTimes);
      }
      if (HasLevel) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Level);
      }
      if (HasExp) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Exp);
      }
      if (HasPayeeAlipayAccount) {
        output.WriteRawTag(154, 2);
        output.WriteString(PayeeAlipayAccount);
      }
      if (HasAgentID) {
        output.WriteRawTag(160, 2);
        output.WriteUInt64(AgentID);
      }
      if (HasVip) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Vip);
      }
      if (HasVipExpireDate) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(VipExpireDate);
      }
      if (HasVipLeft) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(VipLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasID) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (HasAuthType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AuthType);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasPassword) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (HasNickName) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (HasTag) {
        output.WriteRawTag(50);
        output.WriteString(Tag);
      }
      if (HasGender) {
        output.WriteRawTag(56);
        output.WriteBool(Gender);
      }
      if (HasBirthDay) {
        output.WriteRawTag(64);
        output.WriteInt64(BirthDay);
      }
      if (HasDistrict) {
        output.WriteRawTag(74);
        output.WriteString(District);
      }
      if (HasPhoto) {
        output.WriteRawTag(82);
        output.WriteString(Photo);
      }
      if (HasEmail) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (HasPhone) {
        output.WriteRawTag(98);
        output.WriteString(Phone);
      }
      if (HasRegCode) {
        output.WriteRawTag(114);
        output.WriteString(RegCode);
      }
      if (HasRegisterTime) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RegisterTime);
      }
      if (HasTotalTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TotalTime);
      }
      if (HasLastLoginTime) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(LastLoginTime);
      }
      if (HasLastStayTime) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(LastStayTime);
      }
      if (HasLoginTimes) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(LoginTimes);
      }
      if (HasLevel) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Level);
      }
      if (HasExp) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Exp);
      }
      if (HasPayeeAlipayAccount) {
        output.WriteRawTag(154, 2);
        output.WriteString(PayeeAlipayAccount);
      }
      if (HasAgentID) {
        output.WriteRawTag(160, 2);
        output.WriteUInt64(AgentID);
      }
      if (HasVip) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Vip);
      }
      if (HasVipExpireDate) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(VipExpireDate);
      }
      if (HasVipLeft) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(VipLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (HasAuthType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthType);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasPassword) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (HasNickName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (HasGender) {
        size += 1 + 1;
      }
      if (HasBirthDay) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BirthDay);
      }
      if (HasDistrict) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(District);
      }
      if (HasPhoto) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Photo);
      }
      if (HasEmail) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (HasPhone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (HasRegCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegCode);
      }
      if (HasRegisterTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegisterTime);
      }
      if (HasTotalTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalTime);
      }
      if (HasLastLoginTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastLoginTime);
      }
      if (HasLastStayTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastStayTime);
      }
      if (HasLoginTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LoginTimes);
      }
      if (HasLevel) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasExp) {
        size += 2 + 4;
      }
      if (HasPayeeAlipayAccount) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PayeeAlipayAccount);
      }
      if (HasAgentID) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AgentID);
      }
      if (HasVip) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (HasVipExpireDate) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VipExpireDate);
      }
      if (HasVipLeft) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VipLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountDM other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasAuthType) {
        AuthType = other.AuthType;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      if (other.HasNickName) {
        NickName = other.NickName;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.HasGender) {
        Gender = other.Gender;
      }
      if (other.HasBirthDay) {
        BirthDay = other.BirthDay;
      }
      if (other.HasDistrict) {
        District = other.District;
      }
      if (other.HasPhoto) {
        Photo = other.Photo;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasPhone) {
        Phone = other.Phone;
      }
      if (other.HasRegCode) {
        RegCode = other.RegCode;
      }
      if (other.HasRegisterTime) {
        RegisterTime = other.RegisterTime;
      }
      if (other.HasTotalTime) {
        TotalTime = other.TotalTime;
      }
      if (other.HasLastLoginTime) {
        LastLoginTime = other.LastLoginTime;
      }
      if (other.HasLastStayTime) {
        LastStayTime = other.LastStayTime;
      }
      if (other.HasLoginTimes) {
        LoginTimes = other.LoginTimes;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasPayeeAlipayAccount) {
        PayeeAlipayAccount = other.PayeeAlipayAccount;
      }
      if (other.HasAgentID) {
        AgentID = other.AgentID;
      }
      if (other.HasVip) {
        Vip = other.Vip;
      }
      if (other.HasVipExpireDate) {
        VipExpireDate = other.VipExpireDate;
      }
      if (other.HasVipLeft) {
        VipLeft = other.VipLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 16: {
            AuthType = (global::DataModel.EAccountAuth) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 50: {
            Tag = input.ReadString();
            break;
          }
          case 56: {
            Gender = input.ReadBool();
            break;
          }
          case 64: {
            BirthDay = input.ReadInt64();
            break;
          }
          case 74: {
            District = input.ReadString();
            break;
          }
          case 82: {
            Photo = input.ReadString();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 98: {
            Phone = input.ReadString();
            break;
          }
          case 114: {
            RegCode = input.ReadString();
            break;
          }
          case 168: {
            RegisterTime = input.ReadInt64();
            break;
          }
          case 176: {
            TotalTime = input.ReadInt64();
            break;
          }
          case 184: {
            LastLoginTime = input.ReadInt64();
            break;
          }
          case 192: {
            LastStayTime = input.ReadInt64();
            break;
          }
          case 200: {
            LoginTimes = input.ReadUInt64();
            break;
          }
          case 248: {
            Level = input.ReadInt32();
            break;
          }
          case 261: {
            Exp = input.ReadFloat();
            break;
          }
          case 282: {
            PayeeAlipayAccount = input.ReadString();
            break;
          }
          case 288: {
            AgentID = input.ReadUInt64();
            break;
          }
          case 320: {
            Vip = input.ReadInt32();
            break;
          }
          case 328: {
            VipExpireDate = input.ReadInt64();
            break;
          }
          case 336: {
            VipLeft = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 16: {
            AuthType = (global::DataModel.EAccountAuth) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 50: {
            Tag = input.ReadString();
            break;
          }
          case 56: {
            Gender = input.ReadBool();
            break;
          }
          case 64: {
            BirthDay = input.ReadInt64();
            break;
          }
          case 74: {
            District = input.ReadString();
            break;
          }
          case 82: {
            Photo = input.ReadString();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 98: {
            Phone = input.ReadString();
            break;
          }
          case 114: {
            RegCode = input.ReadString();
            break;
          }
          case 168: {
            RegisterTime = input.ReadInt64();
            break;
          }
          case 176: {
            TotalTime = input.ReadInt64();
            break;
          }
          case 184: {
            LastLoginTime = input.ReadInt64();
            break;
          }
          case 192: {
            LastStayTime = input.ReadInt64();
            break;
          }
          case 200: {
            LoginTimes = input.ReadUInt64();
            break;
          }
          case 248: {
            Level = input.ReadInt32();
            break;
          }
          case 261: {
            Exp = input.ReadFloat();
            break;
          }
          case 282: {
            PayeeAlipayAccount = input.ReadString();
            break;
          }
          case 288: {
            AgentID = input.ReadUInt64();
            break;
          }
          case 320: {
            Vip = input.ReadInt32();
            break;
          }
          case 328: {
            VipExpireDate = input.ReadInt64();
            break;
          }
          case 336: {
            VipLeft = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SimpleAccountDM : pb::IMessage<SimpleAccountDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SimpleAccountDM> _parser = new pb::MessageParser<SimpleAccountDM>(() => new SimpleAccountDM());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleAccountDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.AccountDMReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleAccountDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleAccountDM(SimpleAccountDM other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      photo_ = other.photo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleAccountDM Clone() {
      return new SimpleAccountDM(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static string IDDefaultValue = "";

    private string iD_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_ ?? IDDefaultValue; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return iD_ != null; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      iD_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 10;
    private readonly static string PhotoDefaultValue = "";

    private string photo_;
    /// <summary>
    /// 头像链接  -- todo: 以后再做
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Photo {
      get { return photo_ ?? PhotoDefaultValue; }
      set {
        photo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "photo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoto {
      get { return photo_ != null; }
    }
    /// <summary>Clears the value of the "photo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoto() {
      photo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleAccountDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleAccountDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Photo != other.Photo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasPhoto) hash ^= Photo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasID) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasPhoto) {
        output.WriteRawTag(82);
        output.WriteString(Photo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasID) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasPhoto) {
        output.WriteRawTag(82);
        output.WriteString(Photo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasPhoto) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Photo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleAccountDM other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasPhoto) {
        Photo = other.Photo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            Photo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            Photo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RegcodeDM : pb::IMessage<RegcodeDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegcodeDM> _parser = new pb::MessageParser<RegcodeDM>(() => new RegcodeDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegcodeDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.AccountDMReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegcodeDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegcodeDM(RegcodeDM other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      code_ = other.code_;
      genAccountID_ = other.genAccountID_;
      accountID_ = other.accountID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegcodeDM Clone() {
      return new RegcodeDM(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static long IDDefaultValue = 0L;

    private long iD_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iD_ = value;
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private readonly static string CodeDefaultValue = "";

    private string code_;
    /// <summary>
    ///code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_ ?? CodeDefaultValue; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return code_ != null; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      code_ = null;
    }

    /// <summary>Field number for the "GenAccountID" field.</summary>
    public const int GenAccountIDFieldNumber = 3;
    private readonly static string GenAccountIDDefaultValue = "";

    private string genAccountID_;
    /// <summary>
    /// 生成注册码的用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GenAccountID {
      get { return genAccountID_ ?? GenAccountIDDefaultValue; }
      set {
        genAccountID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GenAccountID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGenAccountID {
      get { return genAccountID_ != null; }
    }
    /// <summary>Clears the value of the "GenAccountID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGenAccountID() {
      genAccountID_ = null;
    }

    /// <summary>Field number for the "AccountID" field.</summary>
    public const int AccountIDFieldNumber = 4;
    private readonly static string AccountIDDefaultValue = "";

    private string accountID_;
    /// <summary>
    /// 注册的用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountID {
      get { return accountID_ ?? AccountIDDefaultValue; }
      set {
        accountID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AccountID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountID {
      get { return accountID_ != null; }
    }
    /// <summary>Clears the value of the "AccountID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountID() {
      accountID_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegcodeDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegcodeDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Code != other.Code) return false;
      if (GenAccountID != other.GenAccountID) return false;
      if (AccountID != other.AccountID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasGenAccountID) hash ^= GenAccountID.GetHashCode();
      if (HasAccountID) hash ^= AccountID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (HasCode) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (HasGenAccountID) {
        output.WriteRawTag(26);
        output.WriteString(GenAccountID);
      }
      if (HasAccountID) {
        output.WriteRawTag(34);
        output.WriteString(AccountID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (HasCode) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (HasGenAccountID) {
        output.WriteRawTag(26);
        output.WriteString(GenAccountID);
      }
      if (HasAccountID) {
        output.WriteRawTag(34);
        output.WriteString(AccountID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (HasGenAccountID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GenAccountID);
      }
      if (HasAccountID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegcodeDM other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasGenAccountID) {
        GenAccountID = other.GenAccountID;
      }
      if (other.HasAccountID) {
        AccountID = other.AccountID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            GenAccountID = input.ReadString();
            break;
          }
          case 34: {
            AccountID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            GenAccountID = input.ReadString();
            break;
          }
          case 34: {
            AccountID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
