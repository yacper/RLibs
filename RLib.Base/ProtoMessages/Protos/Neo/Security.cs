// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Neo/Security.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataModel {

  /// <summary>Holder for reflection information generated from Protos/Neo/Security.proto</summary>
  public static partial class SecurityReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/Neo/Security.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SecurityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90b3MvTmVvL1NlY3VyaXR5LnByb3RvEglEYXRhTW9kZWwaH2dvb2ds",
            "ZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aFVByb3Rvcy9Db21tb25EbS5w",
            "cm90bxoaUHJvdG9zL05lby9OZW9Db21tb24ucHJvdG8imAEKCkV4Y2hhbmdl",
            "RE0SCgoCSWQYASACKAkSIgoEQ29kZRgCIAIoDjIULkRhdGFNb2RlbC5FRXhj",
            "aGFuZ2USDAoETmFtZRgLIAEoCRIkCgdDb3VudHJ5GA0gASgOMhMuRGF0YU1v",
            "ZGVsLkVDb3VudHJ5EiYKCEN1cnJlbmN5GA4gASgOMhQuRGF0YU1vZGVsLkVD",
            "dXJyZW5jeSKQBAoIU3ltYm9sRE0SCgoCSWQYASACKAkSCwoDUmljGAIgASgJ",
            "EgwKBENvZGUYCiACKAkSDAoETmFtZRgLIAIoCRIMCgREZXNjGAwgASgJEi4K",
            "DFNlY3VyaXR5VHlwZRgUIAIoDjIYLkRhdGFNb2RlbC5FU2VjdXJpdHlUeXBl",
            "EjQKD1N1YlNlY3VyaXR5VHlwZRgVIAEoDjIbLkRhdGFNb2RlbC5FU3ViU2Vj",
            "dXJpdHlUeXBlEiYKCEV4Y2hhbmdlGBkgAigOMhQuRGF0YU1vZGVsLkVFeGNo",
            "YW5nZRIyCg5FeGNoYW5nZVNlY3RvchgaIAEoDjIaLkRhdGFNb2RlbC5FRXhj",
            "aGFuZ2VTZWN0b3ISJgoIQ3VycmVuY3kYGyACKA4yFC5EYXRhTW9kZWwuRUN1",
            "cnJlbmN5EhEKCVBvaW50U2l6ZRgeIAEoARIPCgdMb3RTaXplGB8gASgBEhEK",
            "CUxpbWl0UmF0ZRggIAEoARISCgpNYXJnaW5SYXRlGCEgASgBEhQKDE1hcmtl",
            "dFRpbWVJZBgjIAEoCRIsCghMaXN0RGF0ZRgpIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASLgoKRGVsaXN0RGF0ZRgqIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASGAoQRnV0dXJlQ29udHJhY3RJZBgzIAEoCSK3",
            "AgoQRnV0dXJlQ29udHJhY3RETRIKCgJJZBgBIAIoCRIMCgRDb2RlGAogAigJ",
            "EgwKBE5hbWUYCyACKAkSDAoERGVzYxgMIAEoCRI0Cg9TdWJTZWN1cml0eVR5",
            "cGUYDSABKA4yGy5EYXRhTW9kZWwuRVN1YlNlY3VyaXR5VHlwZRImCghFeGNo",
            "YW5nZRgPIAIoDjIULkRhdGFNb2RlbC5FRXhjaGFuZ2USDwoHTG90U2l6ZRgQ",
            "IAIoARIRCglQb2ludFNpemUYESACKAESEQoJTGltaXRSYXRlGCAgASgBEhIK",
            "Ck1hcmdpblJhdGUYISABKAESFAoMTWFya2V0VGltZUlkGCMgASgJEhQKDExh",
            "c3RUcmFkZURheRgoIAEoBRIYChBTZXR0bGVtZW50TW9udGhzGCkgAygFIrgB",
            "Cg9GdW5kT3duZXJzaGlwRE0SCgoCSWQYASACKAQSEgoKU2VjdXJpdHlJZBgC",
            "IAIoBBIOCgZTeW1ib2wYAyABKAkSDAoETmFtZRgEIAEoCRINCgVTaGFyZRgF",
            "IAEoARIOCgZDaGFuZ2UYBiABKAESLgoKRmlsaW5nRGF0ZRgHIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGAoQUG9ydGZvbGlvUGVyY2VudBgI",
            "IAEoASLIAgoKRGl2aWRlbmRETRIKCgJJZBgBIAIoBBISCgpTZWN1cml0eUlk",
            "GAIgAigEEg4KBlN5bWJvbBgDIAEoCRIoCgREYXRlGAYgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBImCghDdXJyZW5jeRgHIAEoDjIULkRhdGFN",
            "b2RlbC5FQ3VycmVuY3kSDgoGQW1vdW50GAggASgBEhYKDkFkanVzdGVkQW1v",
            "dW50GAkgASgBEisKB1BheURhdGUYCiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEi4KClJlY29yZERhdGUYCyABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEjMKD0RlY2xhcmF0aW9uRGF0ZRgMIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXAihQEKEEluZGV4Q29tcG9uZW50RE0SCgoC",
            "SWQYASACKAQSEgoKU2VjdXJpdHlJZBgCIAIoBBIOCgZTeW1ib2wYAyABKAkS",
            "CwoDS2V5GAUgASgDEhsKE0NvbXBvbmVudFNlY3VyaXR5SWQYBiACKAQSFwoP",
            "Q29tcG9uZW50U3ltYm9sGAcgASgJKqEBCglFRXhjaGFuZ2USFQoRRUV4Y2hh",
            "bmdlX1Vua25vd24QABIICgRTSEVYEAESCAoEU1pFWBACEggKBEhLRVgQBBII",
            "CgROWVNFEAgSCAoEQU1FWBAQEgoKBk5BU0RBURAgEgoKBUNGRkVYEIACEggK",
            "A1pDRRCABBIJCgRTSEZFEIAIEggKA0RDRRCAEBIICgNJTkUQgCASCgoERlhD",
            "TRCAgAEqkAEKD0VFeGNoYW5nZVNlY3RvchIbChdFRXhjaGFuZ2VTZWN0b3Jf",
            "VW5rbm93bhAAEhgKFEVFeGNoYW5nZVNlY3Rvcl9NYWluEAESFgoSRUV4Y2hh",
            "bmdlU2VjdG9yX0NZEAISFgoSRUV4Y2hhbmdlU2VjdG9yX1pYEAQSFgoSRUV4",
            "Y2hhbmdlU2VjdG9yX0tDEAgquwIKDUVTZWN1cml0eVR5cGUSGQoVRVNlY3Vy",
            "aXR5VHlwZV9Vbmtub3duEAASCQoFU3RvY2sQARIJCgVJbmRleBACEgoKBkZ1",
            "dHVyZRAEEgoKBk9wdGlvbhAIEgkKBUZvcmV4EBASCAoEU3BvdBAgEgkKBFJF",
            "SVQQgAQSCAoDV3J0EIAIEggKA0V0ZhCAEBISCg1DbG9zZWRFbmRGdW5kEOQg",
            "EggKA0FEUhCAQBIKCgROWVJTEICAARIKCgRVbml0EICAAhIJCgNNbHAQgIAE",
            "Eg0KB0x0ZFBhcnQQgIAIEhEKC1JveWFsdHlUcnN0EICAEBIKCgRCb25kEICA",
            "IBIQCgpNdXR1YWxGdW5kEICAQBIVCg5QcmVmZXJyZWRTaGFyZRCAgIABEhUK",
            "DlByZWZlcnJlZFN0b2NrEICAgAIq0wIKEEVTdWJTZWN1cml0eVR5cGUSHAoY",
            "RVN1YlNlY3VyaXR5VHlwZV9Vbmtub3duEAASDQoJU3BvdEZvcmV4EAESDwoL",
            "U3BvdEluZGljZXMQAhIRCg1TcG90Q29tbW9kaXR5EAMSEAoMU3BvdFRyZWFz",
            "dXJ5EAQSDwoLU3BvdEJ1bGxpb24QBRIOCgpTcG90U2hhcmVzEAYSDwoLU3Bv",
            "dEZYSW5kZXgQBxIRCg1TcG90Q0ZEU2hhcmVzEAgSDgoKU3BvdENyeXB0bxAJ",
            "EhIKDkZ1dHVCbGFja01ldGFsEBUSEgoORnV0dU5vbkZlcnJvdXMQFhIQCgxG",
            "dXR1UHJlY2lvdXMQFxIOCgpGdXR1RW5lcmd5EBgSDAoIRnV0dUNvYWwQGRIM",
            "CghGdXR1RmFybRAaEg4KCkZ1dHVHcmVhc2UQGxIRCg1GdXR1RmluYW5jaWFs",
            "EBw="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::DataModel.CommonDmReflection.Descriptor, global::DataModel.NeoCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataModel.EExchange), typeof(global::DataModel.EExchangeSector), typeof(global::DataModel.ESecurityType), typeof(global::DataModel.ESubSecurityType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.ExchangeDM), global::DataModel.ExchangeDM.Parser, new[]{ "Id", "Code", "Name", "Country", "Currency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.SymbolDM), global::DataModel.SymbolDM.Parser, new[]{ "Id", "Ric", "Code", "Name", "Desc", "SecurityType", "SubSecurityType", "Exchange", "ExchangeSector", "Currency", "PointSize", "LotSize", "LimitRate", "MarginRate", "MarketTimeId", "ListDate", "DelistDate", "FutureContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.FutureContractDM), global::DataModel.FutureContractDM.Parser, new[]{ "Id", "Code", "Name", "Desc", "SubSecurityType", "Exchange", "LotSize", "PointSize", "LimitRate", "MarginRate", "MarketTimeId", "LastTradeDay", "SettlementMonths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.FundOwnershipDM), global::DataModel.FundOwnershipDM.Parser, new[]{ "Id", "SecurityId", "Symbol", "Name", "Share", "Change", "FilingDate", "PortfolioPercent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.DividendDM), global::DataModel.DividendDM.Parser, new[]{ "Id", "SecurityId", "Symbol", "Date", "Currency", "Amount", "AdjustedAmount", "PayDate", "RecordDate", "DeclarationDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataModel.IndexComponentDM), global::DataModel.IndexComponentDM.Parser, new[]{ "Id", "SecurityId", "Symbol", "Key", "ComponentSecurityId", "ComponentSymbol" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EExchange {
    [pbr::OriginalName("EExchange_Unknown")] Unknown = 0,
    [pbr::OriginalName("SHEX")] Shex = 1,
    [pbr::OriginalName("SZEX")] Szex = 2,
    [pbr::OriginalName("HKEX")] Hkex = 4,
    [pbr::OriginalName("NYSE")] Nyse = 8,
    [pbr::OriginalName("AMEX")] Amex = 16,
    [pbr::OriginalName("NASDAQ")] Nasdaq = 32,
    /// <summary>
    /// 中国期货
    /// </summary>
    [pbr::OriginalName("CFFEX")] Cffex = 256,
    /// <summary>
    /// 郑州商品交易所
    /// </summary>
    [pbr::OriginalName("ZCE")] Zce = 512,
    /// <summary>
    ///上海期货交易所
    /// </summary>
    [pbr::OriginalName("SHFE")] Shfe = 1024,
    /// <summary>
    ///大连商品交易所
    /// </summary>
    [pbr::OriginalName("DCE")] Dce = 2048,
    /// <summary>
    ///上期能源
    /// </summary>
    [pbr::OriginalName("INE")] Ine = 4096,
    [pbr::OriginalName("FXCM")] Fxcm = 16384,
  }

  public enum EExchangeSector {
    /// <summary>
    ///            
    /// </summary>
    [pbr::OriginalName("EExchangeSector_Unknown")] Unknown = 0,
    /// <summary>
    /// 主板          
    /// </summary>
    [pbr::OriginalName("EExchangeSector_Main")] Main = 1,
    /// <summary>
    /// 创业板
    /// </summary>
    [pbr::OriginalName("EExchangeSector_CY")] Cy = 2,
    /// <summary>
    /// 中小板
    /// </summary>
    [pbr::OriginalName("EExchangeSector_ZX")] Zx = 4,
    /// <summary>
    /// 科创板
    /// </summary>
    [pbr::OriginalName("EExchangeSector_KC")] Kc = 8,
  }

  public enum ESecurityType {
    [pbr::OriginalName("ESecurityType_Unknown")] Unknown = 0,
    /// <summary>
    /// 股票
    /// </summary>
    [pbr::OriginalName("Stock")] Stock = 1,
    /// <summary>
    /// 指数
    /// </summary>
    [pbr::OriginalName("Index")] Index = 2,
    /// <summary>
    /// 期货
    /// </summary>
    [pbr::OriginalName("Future")] Future = 4,
    /// <summary>
    /// 期权
    /// </summary>
    [pbr::OriginalName("Option")] Option = 8,
    /// <summary>
    /// 外汇
    /// </summary>
    [pbr::OriginalName("Forex")] Forex = 16,
    /// <summary>
    /// 现货
    /// </summary>
    [pbr::OriginalName("Spot")] Spot = 32,
    /// <summary>
    /// REIT
    /// </summary>
    [pbr::OriginalName("REIT")] Reit = 512,
    /// <summary>
    /// warrent
    /// </summary>
    [pbr::OriginalName("Wrt")] Wrt = 1024,
    /// <summary>
    /// etf
    /// </summary>
    [pbr::OriginalName("Etf")] Etf = 2048,
    /// <summary>
    /// 封闭式基金
    /// </summary>
    [pbr::OriginalName("ClosedEndFund")] ClosedEndFund = 4196,
    /// <summary>
    /// ADR
    /// </summary>
    [pbr::OriginalName("ADR")] Adr = 8192,
    /// <summary>
    /// Nyrs
    /// </summary>
    [pbr::OriginalName("NYRS")] Nyrs = 16384,
    /// <summary>
    /// 空头公司
    /// </summary>
    [pbr::OriginalName("Unit")] Unit = 32768,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("Mlp")] Mlp = 65536,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("LtdPart")] LtdPart = 131072,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("RoyaltyTrst")] RoyaltyTrst = 262144,
    [pbr::OriginalName("Bond")] Bond = 524288,
    [pbr::OriginalName("MutualFund")] MutualFund = 1048576,
    [pbr::OriginalName("PreferredShare")] PreferredShare = 2097152,
    [pbr::OriginalName("PreferredStock")] PreferredStock = 4194304,
  }

  public enum ESubSecurityType {
    /// <summary>
    ////  现货分类
    /// </summary>
    [pbr::OriginalName("ESubSecurityType_Unknown")] Unknown = 0,
    [pbr::OriginalName("SpotForex")] SpotForex = 1,
    [pbr::OriginalName("SpotIndices")] SpotIndices = 2,
    [pbr::OriginalName("SpotCommodity")] SpotCommodity = 3,
    [pbr::OriginalName("SpotTreasury")] SpotTreasury = 4,
    [pbr::OriginalName("SpotBullion")] SpotBullion = 5,
    [pbr::OriginalName("SpotShares")] SpotShares = 6,
    [pbr::OriginalName("SpotFXIndex")] SpotFxindex = 7,
    [pbr::OriginalName("SpotCFDShares")] SpotCfdshares = 8,
    [pbr::OriginalName("SpotCrypto")] SpotCrypto = 9,
    /// <summary>
    /// 期货分类
    /// </summary>
    [pbr::OriginalName("FutuBlackMetal")] FutuBlackMetal = 21,
    /// <summary>
    ///有色金属
    /// </summary>
    [pbr::OriginalName("FutuNonFerrous")] FutuNonFerrous = 22,
    /// <summary>
    ///贵金属
    /// </summary>
    [pbr::OriginalName("FutuPrecious")] FutuPrecious = 23,
    /// <summary>
    ///能源化工
    /// </summary>
    [pbr::OriginalName("FutuEnergy")] FutuEnergy = 24,
    /// <summary>
    ///煤炭
    /// </summary>
    [pbr::OriginalName("FutuCoal")] FutuCoal = 25,
    /// <summary>
    ///农产品
    /// </summary>
    [pbr::OriginalName("FutuFarm")] FutuFarm = 26,
    /// <summary>
    ///油脂油料
    /// </summary>
    [pbr::OriginalName("FutuGrease")] FutuGrease = 27,
    /// <summary>
    ///金融
    /// </summary>
    [pbr::OriginalName("FutuFinancial")] FutuFinancial = 28,
  }

  #endregion

  #region Messages
  public sealed partial class ExchangeDM : pb::IMessage<ExchangeDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeDM> _parser = new pb::MessageParser<ExchangeDM>(() => new ExchangeDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDM(ExchangeDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      code_ = other.code_;
      name_ = other.name_;
      country_ = other.country_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDM Clone() {
      return new ExchangeDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private readonly static global::DataModel.EExchange CodeDefaultValue = global::DataModel.EExchange.Unknown;

    private global::DataModel.EExchange code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EExchange Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 11;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 13;
    private readonly static global::DataModel.ECountry CountryDefaultValue = global::DataModel.ECountry.Unknown;

    private global::DataModel.ECountry country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECountry Country {
      get { if ((_hasBits0 & 2) != 0) { return country_; } else { return CountryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        country_ = value;
      }
    }
    /// <summary>Gets whether the "Country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountry {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountry() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 14;
    private readonly static global::DataModel.ECurrency CurrencyDefaultValue = global::DataModel.ECurrency.Ply;

    private global::DataModel.ECurrency currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECurrency Currency {
      get { if ((_hasBits0 & 4) != 0) { return currency_; } else { return CurrencyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        currency_ = value;
      }
    }
    /// <summary>Gets whether the "Currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrency {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrency() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Country != other.Country) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasCountry) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Country);
      }
      if (HasCurrency) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasCountry) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Country);
      }
      if (HasCurrency) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Country);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Code = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 104: {
            Country = (global::DataModel.ECountry) input.ReadEnum();
            break;
          }
          case 112: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Code = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 104: {
            Country = (global::DataModel.ECountry) input.ReadEnum();
            break;
          }
          case 112: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SymbolDM : pb::IMessage<SymbolDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolDM> _parser = new pb::MessageParser<SymbolDM>(() => new SymbolDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDM(SymbolDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      ric_ = other.ric_;
      code_ = other.code_;
      name_ = other.name_;
      desc_ = other.desc_;
      securityType_ = other.securityType_;
      subSecurityType_ = other.subSecurityType_;
      exchange_ = other.exchange_;
      exchangeSector_ = other.exchangeSector_;
      currency_ = other.currency_;
      pointSize_ = other.pointSize_;
      lotSize_ = other.lotSize_;
      limitRate_ = other.limitRate_;
      marginRate_ = other.marginRate_;
      marketTimeId_ = other.marketTimeId_;
      listDate_ = other.listDate_ != null ? other.listDate_.Clone() : null;
      delistDate_ = other.delistDate_ != null ? other.delistDate_.Clone() : null;
      futureContractId_ = other.futureContractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDM Clone() {
      return new SymbolDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "Ric" field.</summary>
    public const int RicFieldNumber = 2;
    private readonly static string RicDefaultValue = "";

    private string ric_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ric {
      get { return ric_ ?? RicDefaultValue; }
      set {
        ric_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Ric" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRic {
      get { return ric_ != null; }
    }
    /// <summary>Clears the value of the "Ric" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRic() {
      ric_ = null;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 10;
    private readonly static string CodeDefaultValue = "";

    private string code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_ ?? CodeDefaultValue; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return code_ != null; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      code_ = null;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 11;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 12;
    private readonly static string DescDefaultValue = "";

    private string desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_ ?? DescDefaultValue; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesc {
      get { return desc_ != null; }
    }
    /// <summary>Clears the value of the "Desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesc() {
      desc_ = null;
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 20;
    private readonly static global::DataModel.ESecurityType SecurityTypeDefaultValue = global::DataModel.ESecurityType.Unknown;

    private global::DataModel.ESecurityType securityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ESecurityType SecurityType {
      get { if ((_hasBits0 & 1) != 0) { return securityType_; } else { return SecurityTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        securityType_ = value;
      }
    }
    /// <summary>Gets whether the "SecurityType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SecurityType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SubSecurityType" field.</summary>
    public const int SubSecurityTypeFieldNumber = 21;
    private readonly static global::DataModel.ESubSecurityType SubSecurityTypeDefaultValue = global::DataModel.ESubSecurityType.Unknown;

    private global::DataModel.ESubSecurityType subSecurityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ESubSecurityType SubSecurityType {
      get { if ((_hasBits0 & 2) != 0) { return subSecurityType_; } else { return SubSecurityTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        subSecurityType_ = value;
      }
    }
    /// <summary>Gets whether the "SubSecurityType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubSecurityType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "SubSecurityType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubSecurityType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 25;
    private readonly static global::DataModel.EExchange ExchangeDefaultValue = global::DataModel.EExchange.Unknown;

    private global::DataModel.EExchange exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EExchange Exchange {
      get { if ((_hasBits0 & 4) != 0) { return exchange_; } else { return ExchangeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        exchange_ = value;
      }
    }
    /// <summary>Gets whether the "Exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExchange {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExchange() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ExchangeSector" field.</summary>
    public const int ExchangeSectorFieldNumber = 26;
    private readonly static global::DataModel.EExchangeSector ExchangeSectorDefaultValue = global::DataModel.EExchangeSector.Unknown;

    private global::DataModel.EExchangeSector exchangeSector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EExchangeSector ExchangeSector {
      get { if ((_hasBits0 & 8) != 0) { return exchangeSector_; } else { return ExchangeSectorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        exchangeSector_ = value;
      }
    }
    /// <summary>Gets whether the "ExchangeSector" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExchangeSector {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ExchangeSector" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExchangeSector() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 27;
    private readonly static global::DataModel.ECurrency CurrencyDefaultValue = global::DataModel.ECurrency.Ply;

    private global::DataModel.ECurrency currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECurrency Currency {
      get { if ((_hasBits0 & 16) != 0) { return currency_; } else { return CurrencyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        currency_ = value;
      }
    }
    /// <summary>Gets whether the "Currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrency {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "Currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrency() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "PointSize" field.</summary>
    public const int PointSizeFieldNumber = 30;
    private readonly static double PointSizeDefaultValue = 0D;

    private double pointSize_;
    /// <summary>
    /// 点差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointSize {
      get { if ((_hasBits0 & 32) != 0) { return pointSize_; } else { return PointSizeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        pointSize_ = value;
      }
    }
    /// <summary>Gets whether the "PointSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointSize {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "PointSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointSize() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "LotSize" field.</summary>
    public const int LotSizeFieldNumber = 31;
    private readonly static double LotSizeDefaultValue = 0D;

    private double lotSize_;
    /// <summary>
    /// 每手
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LotSize {
      get { if ((_hasBits0 & 64) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lotSize_ = value;
      }
    }
    /// <summary>Gets whether the "LotSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLotSize {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "LotSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLotSize() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "LimitRate" field.</summary>
    public const int LimitRateFieldNumber = 32;
    private readonly static double LimitRateDefaultValue = 0D;

    private double limitRate_;
    /// <summary>
    /// 涨跌幅限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LimitRate {
      get { if ((_hasBits0 & 128) != 0) { return limitRate_; } else { return LimitRateDefaultValue; } }
      set {
        _hasBits0 |= 128;
        limitRate_ = value;
      }
    }
    /// <summary>Gets whether the "LimitRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitRate {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "LimitRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimitRate() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "MarginRate" field.</summary>
    public const int MarginRateFieldNumber = 33;
    private readonly static double MarginRateDefaultValue = 0D;

    private double marginRate_;
    /// <summary>
    /// 保障金率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarginRate {
      get { if ((_hasBits0 & 256) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
      set {
        _hasBits0 |= 256;
        marginRate_ = value;
      }
    }
    /// <summary>Gets whether the "MarginRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarginRate {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "MarginRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarginRate() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "MarketTimeId" field.</summary>
    public const int MarketTimeIdFieldNumber = 35;
    private readonly static string MarketTimeIdDefaultValue = "";

    private string marketTimeId_;
    /// <summary>
    /// 交易时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketTimeId {
      get { return marketTimeId_ ?? MarketTimeIdDefaultValue; }
      set {
        marketTimeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "MarketTimeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarketTimeId {
      get { return marketTimeId_ != null; }
    }
    /// <summary>Clears the value of the "MarketTimeId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarketTimeId() {
      marketTimeId_ = null;
    }

    /// <summary>Field number for the "ListDate" field.</summary>
    public const int ListDateFieldNumber = 41;
    private global::Google.Protobuf.WellKnownTypes.Timestamp listDate_;
    /// <summary>
    /// 上市日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ListDate {
      get { return listDate_; }
      set {
        listDate_ = value;
      }
    }

    /// <summary>Field number for the "DelistDate" field.</summary>
    public const int DelistDateFieldNumber = 42;
    private global::Google.Protobuf.WellKnownTypes.Timestamp delistDate_;
    /// <summary>
    /// 下市日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DelistDate {
      get { return delistDate_; }
      set {
        delistDate_ = value;
      }
    }

    /// <summary>Field number for the "FutureContractId" field.</summary>
    public const int FutureContractIdFieldNumber = 51;
    private readonly static string FutureContractIdDefaultValue = "";

    private string futureContractId_;
    /// <summary>
    //// future
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FutureContractId {
      get { return futureContractId_ ?? FutureContractIdDefaultValue; }
      set {
        futureContractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "FutureContractId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFutureContractId {
      get { return futureContractId_ != null; }
    }
    /// <summary>Clears the value of the "FutureContractId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFutureContractId() {
      futureContractId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ric != other.Ric) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (SecurityType != other.SecurityType) return false;
      if (SubSecurityType != other.SubSecurityType) return false;
      if (Exchange != other.Exchange) return false;
      if (ExchangeSector != other.ExchangeSector) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointSize, other.PointSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LotSize, other.LotSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitRate, other.LimitRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
      if (MarketTimeId != other.MarketTimeId) return false;
      if (!object.Equals(ListDate, other.ListDate)) return false;
      if (!object.Equals(DelistDate, other.DelistDate)) return false;
      if (FutureContractId != other.FutureContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasRic) hash ^= Ric.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDesc) hash ^= Desc.GetHashCode();
      if (HasSecurityType) hash ^= SecurityType.GetHashCode();
      if (HasSubSecurityType) hash ^= SubSecurityType.GetHashCode();
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (HasExchangeSector) hash ^= ExchangeSector.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasPointSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointSize);
      if (HasLotSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LotSize);
      if (HasLimitRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitRate);
      if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
      if (HasMarketTimeId) hash ^= MarketTimeId.GetHashCode();
      if (listDate_ != null) hash ^= ListDate.GetHashCode();
      if (delistDate_ != null) hash ^= DelistDate.GetHashCode();
      if (HasFutureContractId) hash ^= FutureContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasRic) {
        output.WriteRawTag(18);
        output.WriteString(Ric);
      }
      if (HasCode) {
        output.WriteRawTag(82);
        output.WriteString(Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasDesc) {
        output.WriteRawTag(98);
        output.WriteString(Desc);
      }
      if (HasSecurityType) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) SecurityType);
      }
      if (HasSubSecurityType) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SubSecurityType);
      }
      if (HasExchange) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) Exchange);
      }
      if (HasExchangeSector) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) ExchangeSector);
      }
      if (HasCurrency) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Currency);
      }
      if (HasPointSize) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(PointSize);
      }
      if (HasLotSize) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(LotSize);
      }
      if (HasLimitRate) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(LimitRate);
      }
      if (HasMarginRate) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(MarginRate);
      }
      if (HasMarketTimeId) {
        output.WriteRawTag(154, 2);
        output.WriteString(MarketTimeId);
      }
      if (listDate_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ListDate);
      }
      if (delistDate_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(DelistDate);
      }
      if (HasFutureContractId) {
        output.WriteRawTag(154, 3);
        output.WriteString(FutureContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasRic) {
        output.WriteRawTag(18);
        output.WriteString(Ric);
      }
      if (HasCode) {
        output.WriteRawTag(82);
        output.WriteString(Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasDesc) {
        output.WriteRawTag(98);
        output.WriteString(Desc);
      }
      if (HasSecurityType) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) SecurityType);
      }
      if (HasSubSecurityType) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SubSecurityType);
      }
      if (HasExchange) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) Exchange);
      }
      if (HasExchangeSector) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) ExchangeSector);
      }
      if (HasCurrency) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Currency);
      }
      if (HasPointSize) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(PointSize);
      }
      if (HasLotSize) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(LotSize);
      }
      if (HasLimitRate) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(LimitRate);
      }
      if (HasMarginRate) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(MarginRate);
      }
      if (HasMarketTimeId) {
        output.WriteRawTag(154, 2);
        output.WriteString(MarketTimeId);
      }
      if (listDate_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ListDate);
      }
      if (delistDate_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(DelistDate);
      }
      if (HasFutureContractId) {
        output.WriteRawTag(154, 3);
        output.WriteString(FutureContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasRic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ric);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDesc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (HasSecurityType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (HasSubSecurityType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SubSecurityType);
      }
      if (HasExchange) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (HasExchangeSector) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExchangeSector);
      }
      if (HasCurrency) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (HasPointSize) {
        size += 2 + 8;
      }
      if (HasLotSize) {
        size += 2 + 8;
      }
      if (HasLimitRate) {
        size += 2 + 8;
      }
      if (HasMarginRate) {
        size += 2 + 8;
      }
      if (HasMarketTimeId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketTimeId);
      }
      if (listDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListDate);
      }
      if (delistDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DelistDate);
      }
      if (HasFutureContractId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FutureContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasRic) {
        Ric = other.Ric;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      if (other.HasSecurityType) {
        SecurityType = other.SecurityType;
      }
      if (other.HasSubSecurityType) {
        SubSecurityType = other.SubSecurityType;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.HasExchangeSector) {
        ExchangeSector = other.ExchangeSector;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasPointSize) {
        PointSize = other.PointSize;
      }
      if (other.HasLotSize) {
        LotSize = other.LotSize;
      }
      if (other.HasLimitRate) {
        LimitRate = other.LimitRate;
      }
      if (other.HasMarginRate) {
        MarginRate = other.MarginRate;
      }
      if (other.HasMarketTimeId) {
        MarketTimeId = other.MarketTimeId;
      }
      if (other.listDate_ != null) {
        if (listDate_ == null) {
          ListDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ListDate.MergeFrom(other.ListDate);
      }
      if (other.delistDate_ != null) {
        if (delistDate_ == null) {
          DelistDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DelistDate.MergeFrom(other.DelistDate);
      }
      if (other.HasFutureContractId) {
        FutureContractId = other.FutureContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Ric = input.ReadString();
            break;
          }
          case 82: {
            Code = input.ReadString();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 98: {
            Desc = input.ReadString();
            break;
          }
          case 160: {
            SecurityType = (global::DataModel.ESecurityType) input.ReadEnum();
            break;
          }
          case 168: {
            SubSecurityType = (global::DataModel.ESubSecurityType) input.ReadEnum();
            break;
          }
          case 200: {
            Exchange = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 208: {
            ExchangeSector = (global::DataModel.EExchangeSector) input.ReadEnum();
            break;
          }
          case 216: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
          case 241: {
            PointSize = input.ReadDouble();
            break;
          }
          case 249: {
            LotSize = input.ReadDouble();
            break;
          }
          case 257: {
            LimitRate = input.ReadDouble();
            break;
          }
          case 265: {
            MarginRate = input.ReadDouble();
            break;
          }
          case 282: {
            MarketTimeId = input.ReadString();
            break;
          }
          case 330: {
            if (listDate_ == null) {
              ListDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ListDate);
            break;
          }
          case 338: {
            if (delistDate_ == null) {
              DelistDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DelistDate);
            break;
          }
          case 410: {
            FutureContractId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Ric = input.ReadString();
            break;
          }
          case 82: {
            Code = input.ReadString();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 98: {
            Desc = input.ReadString();
            break;
          }
          case 160: {
            SecurityType = (global::DataModel.ESecurityType) input.ReadEnum();
            break;
          }
          case 168: {
            SubSecurityType = (global::DataModel.ESubSecurityType) input.ReadEnum();
            break;
          }
          case 200: {
            Exchange = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 208: {
            ExchangeSector = (global::DataModel.EExchangeSector) input.ReadEnum();
            break;
          }
          case 216: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
          case 241: {
            PointSize = input.ReadDouble();
            break;
          }
          case 249: {
            LotSize = input.ReadDouble();
            break;
          }
          case 257: {
            LimitRate = input.ReadDouble();
            break;
          }
          case 265: {
            MarginRate = input.ReadDouble();
            break;
          }
          case 282: {
            MarketTimeId = input.ReadString();
            break;
          }
          case 330: {
            if (listDate_ == null) {
              ListDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ListDate);
            break;
          }
          case 338: {
            if (delistDate_ == null) {
              DelistDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DelistDate);
            break;
          }
          case 410: {
            FutureContractId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FutureContractDM : pb::IMessage<FutureContractDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FutureContractDM> _parser = new pb::MessageParser<FutureContractDM>(() => new FutureContractDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FutureContractDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureContractDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureContractDM(FutureContractDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      code_ = other.code_;
      name_ = other.name_;
      desc_ = other.desc_;
      subSecurityType_ = other.subSecurityType_;
      exchange_ = other.exchange_;
      lotSize_ = other.lotSize_;
      pointSize_ = other.pointSize_;
      limitRate_ = other.limitRate_;
      marginRate_ = other.marginRate_;
      marketTimeId_ = other.marketTimeId_;
      lastTradeDay_ = other.lastTradeDay_;
      settlementMonths_ = other.settlementMonths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureContractDM Clone() {
      return new FutureContractDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 10;
    private readonly static string CodeDefaultValue = "";

    private string code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_ ?? CodeDefaultValue; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return code_ != null; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      code_ = null;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 11;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 12;
    private readonly static string DescDefaultValue = "";

    private string desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_ ?? DescDefaultValue; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesc {
      get { return desc_ != null; }
    }
    /// <summary>Clears the value of the "Desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesc() {
      desc_ = null;
    }

    /// <summary>Field number for the "SubSecurityType" field.</summary>
    public const int SubSecurityTypeFieldNumber = 13;
    private readonly static global::DataModel.ESubSecurityType SubSecurityTypeDefaultValue = global::DataModel.ESubSecurityType.Unknown;

    private global::DataModel.ESubSecurityType subSecurityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ESubSecurityType SubSecurityType {
      get { if ((_hasBits0 & 1) != 0) { return subSecurityType_; } else { return SubSecurityTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subSecurityType_ = value;
      }
    }
    /// <summary>Gets whether the "SubSecurityType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubSecurityType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SubSecurityType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubSecurityType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 15;
    private readonly static global::DataModel.EExchange ExchangeDefaultValue = global::DataModel.EExchange.Unknown;

    private global::DataModel.EExchange exchange_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.EExchange Exchange {
      get { if ((_hasBits0 & 2) != 0) { return exchange_; } else { return ExchangeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        exchange_ = value;
      }
    }
    /// <summary>Gets whether the "Exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExchange {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExchange() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "LotSize" field.</summary>
    public const int LotSizeFieldNumber = 16;
    private readonly static double LotSizeDefaultValue = 0D;

    private double lotSize_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LotSize {
      get { if ((_hasBits0 & 4) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lotSize_ = value;
      }
    }
    /// <summary>Gets whether the "LotSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLotSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "LotSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLotSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "PointSize" field.</summary>
    public const int PointSizeFieldNumber = 17;
    private readonly static double PointSizeDefaultValue = 0D;

    private double pointSize_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointSize {
      get { if ((_hasBits0 & 8) != 0) { return pointSize_; } else { return PointSizeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pointSize_ = value;
      }
    }
    /// <summary>Gets whether the "PointSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointSize {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "PointSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointSize() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "LimitRate" field.</summary>
    public const int LimitRateFieldNumber = 32;
    private readonly static double LimitRateDefaultValue = 0D;

    private double limitRate_;
    /// <summary>
    /// 涨跌幅限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LimitRate {
      get { if ((_hasBits0 & 16) != 0) { return limitRate_; } else { return LimitRateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        limitRate_ = value;
      }
    }
    /// <summary>Gets whether the "LimitRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitRate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "LimitRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimitRate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "MarginRate" field.</summary>
    public const int MarginRateFieldNumber = 33;
    private readonly static double MarginRateDefaultValue = 0D;

    private double marginRate_;
    /// <summary>
    /// 保障金率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarginRate {
      get { if ((_hasBits0 & 32) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        marginRate_ = value;
      }
    }
    /// <summary>Gets whether the "MarginRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarginRate {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "MarginRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarginRate() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "MarketTimeId" field.</summary>
    public const int MarketTimeIdFieldNumber = 35;
    private readonly static string MarketTimeIdDefaultValue = "";

    private string marketTimeId_;
    /// <summary>
    /// 交易时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketTimeId {
      get { return marketTimeId_ ?? MarketTimeIdDefaultValue; }
      set {
        marketTimeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "MarketTimeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarketTimeId {
      get { return marketTimeId_ != null; }
    }
    /// <summary>Clears the value of the "MarketTimeId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarketTimeId() {
      marketTimeId_ = null;
    }

    /// <summary>Field number for the "LastTradeDay" field.</summary>
    public const int LastTradeDayFieldNumber = 40;
    private readonly static int LastTradeDayDefaultValue = 0;

    private int lastTradeDay_;
    /// <summary>
    /// 最后交易日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTradeDay {
      get { if ((_hasBits0 & 64) != 0) { return lastTradeDay_; } else { return LastTradeDayDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lastTradeDay_ = value;
      }
    }
    /// <summary>Gets whether the "LastTradeDay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastTradeDay {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "LastTradeDay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastTradeDay() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "SettlementMonths" field.</summary>
    public const int SettlementMonthsFieldNumber = 41;
    private static readonly pb::FieldCodec<int> _repeated_settlementMonths_codec
        = pb::FieldCodec.ForInt32(328);
    private readonly pbc::RepeatedField<int> settlementMonths_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 交割月份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SettlementMonths {
      get { return settlementMonths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FutureContractDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FutureContractDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (SubSecurityType != other.SubSecurityType) return false;
      if (Exchange != other.Exchange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LotSize, other.LotSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointSize, other.PointSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitRate, other.LimitRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
      if (MarketTimeId != other.MarketTimeId) return false;
      if (LastTradeDay != other.LastTradeDay) return false;
      if(!settlementMonths_.Equals(other.settlementMonths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDesc) hash ^= Desc.GetHashCode();
      if (HasSubSecurityType) hash ^= SubSecurityType.GetHashCode();
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (HasLotSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LotSize);
      if (HasPointSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointSize);
      if (HasLimitRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitRate);
      if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
      if (HasMarketTimeId) hash ^= MarketTimeId.GetHashCode();
      if (HasLastTradeDay) hash ^= LastTradeDay.GetHashCode();
      hash ^= settlementMonths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCode) {
        output.WriteRawTag(82);
        output.WriteString(Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasDesc) {
        output.WriteRawTag(98);
        output.WriteString(Desc);
      }
      if (HasSubSecurityType) {
        output.WriteRawTag(104);
        output.WriteEnum((int) SubSecurityType);
      }
      if (HasExchange) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Exchange);
      }
      if (HasLotSize) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(LotSize);
      }
      if (HasPointSize) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(PointSize);
      }
      if (HasLimitRate) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(LimitRate);
      }
      if (HasMarginRate) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(MarginRate);
      }
      if (HasMarketTimeId) {
        output.WriteRawTag(154, 2);
        output.WriteString(MarketTimeId);
      }
      if (HasLastTradeDay) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(LastTradeDay);
      }
      settlementMonths_.WriteTo(output, _repeated_settlementMonths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCode) {
        output.WriteRawTag(82);
        output.WriteString(Code);
      }
      if (HasName) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (HasDesc) {
        output.WriteRawTag(98);
        output.WriteString(Desc);
      }
      if (HasSubSecurityType) {
        output.WriteRawTag(104);
        output.WriteEnum((int) SubSecurityType);
      }
      if (HasExchange) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Exchange);
      }
      if (HasLotSize) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(LotSize);
      }
      if (HasPointSize) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(PointSize);
      }
      if (HasLimitRate) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(LimitRate);
      }
      if (HasMarginRate) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(MarginRate);
      }
      if (HasMarketTimeId) {
        output.WriteRawTag(154, 2);
        output.WriteString(MarketTimeId);
      }
      if (HasLastTradeDay) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(LastTradeDay);
      }
      settlementMonths_.WriteTo(ref output, _repeated_settlementMonths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDesc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (HasSubSecurityType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubSecurityType);
      }
      if (HasExchange) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (HasLotSize) {
        size += 2 + 8;
      }
      if (HasPointSize) {
        size += 2 + 8;
      }
      if (HasLimitRate) {
        size += 2 + 8;
      }
      if (HasMarginRate) {
        size += 2 + 8;
      }
      if (HasMarketTimeId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketTimeId);
      }
      if (HasLastTradeDay) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastTradeDay);
      }
      size += settlementMonths_.CalculateSize(_repeated_settlementMonths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FutureContractDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      if (other.HasSubSecurityType) {
        SubSecurityType = other.SubSecurityType;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.HasLotSize) {
        LotSize = other.LotSize;
      }
      if (other.HasPointSize) {
        PointSize = other.PointSize;
      }
      if (other.HasLimitRate) {
        LimitRate = other.LimitRate;
      }
      if (other.HasMarginRate) {
        MarginRate = other.MarginRate;
      }
      if (other.HasMarketTimeId) {
        MarketTimeId = other.MarketTimeId;
      }
      if (other.HasLastTradeDay) {
        LastTradeDay = other.LastTradeDay;
      }
      settlementMonths_.Add(other.settlementMonths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 82: {
            Code = input.ReadString();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 98: {
            Desc = input.ReadString();
            break;
          }
          case 104: {
            SubSecurityType = (global::DataModel.ESubSecurityType) input.ReadEnum();
            break;
          }
          case 120: {
            Exchange = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 129: {
            LotSize = input.ReadDouble();
            break;
          }
          case 137: {
            PointSize = input.ReadDouble();
            break;
          }
          case 257: {
            LimitRate = input.ReadDouble();
            break;
          }
          case 265: {
            MarginRate = input.ReadDouble();
            break;
          }
          case 282: {
            MarketTimeId = input.ReadString();
            break;
          }
          case 320: {
            LastTradeDay = input.ReadInt32();
            break;
          }
          case 330:
          case 328: {
            settlementMonths_.AddEntriesFrom(input, _repeated_settlementMonths_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 82: {
            Code = input.ReadString();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 98: {
            Desc = input.ReadString();
            break;
          }
          case 104: {
            SubSecurityType = (global::DataModel.ESubSecurityType) input.ReadEnum();
            break;
          }
          case 120: {
            Exchange = (global::DataModel.EExchange) input.ReadEnum();
            break;
          }
          case 129: {
            LotSize = input.ReadDouble();
            break;
          }
          case 137: {
            PointSize = input.ReadDouble();
            break;
          }
          case 257: {
            LimitRate = input.ReadDouble();
            break;
          }
          case 265: {
            MarginRate = input.ReadDouble();
            break;
          }
          case 282: {
            MarketTimeId = input.ReadString();
            break;
          }
          case 320: {
            LastTradeDay = input.ReadInt32();
            break;
          }
          case 330:
          case 328: {
            settlementMonths_.AddEntriesFrom(ref input, _repeated_settlementMonths_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundOwnershipDM : pb::IMessage<FundOwnershipDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundOwnershipDM> _parser = new pb::MessageParser<FundOwnershipDM>(() => new FundOwnershipDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundOwnershipDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundOwnershipDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundOwnershipDM(FundOwnershipDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      securityId_ = other.securityId_;
      symbol_ = other.symbol_;
      name_ = other.name_;
      share_ = other.share_;
      change_ = other.change_;
      filingDate_ = other.filingDate_ != null ? other.filingDate_.Clone() : null;
      portfolioPercent_ = other.portfolioPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundOwnershipDM Clone() {
      return new FundOwnershipDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SecurityId" field.</summary>
    public const int SecurityIdFieldNumber = 2;
    private readonly static ulong SecurityIdDefaultValue = 0UL;

    private ulong securityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SecurityId {
      get { if ((_hasBits0 & 2) != 0) { return securityId_; } else { return SecurityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        securityId_ = value;
      }
    }
    /// <summary>Gets whether the "SecurityId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "SecurityId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "Symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Share" field.</summary>
    public const int ShareFieldNumber = 5;
    private readonly static double ShareDefaultValue = 0D;

    private double share_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Share {
      get { if ((_hasBits0 & 4) != 0) { return share_; } else { return ShareDefaultValue; } }
      set {
        _hasBits0 |= 4;
        share_ = value;
      }
    }
    /// <summary>Gets whether the "Share" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShare {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Share" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShare() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Change" field.</summary>
    public const int ChangeFieldNumber = 6;
    private readonly static double ChangeDefaultValue = 0D;

    private double change_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Change {
      get { if ((_hasBits0 & 8) != 0) { return change_; } else { return ChangeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        change_ = value;
      }
    }
    /// <summary>Gets whether the "Change" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChange {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Change" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChange() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "FilingDate" field.</summary>
    public const int FilingDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp filingDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FilingDate {
      get { return filingDate_; }
      set {
        filingDate_ = value;
      }
    }

    /// <summary>Field number for the "PortfolioPercent" field.</summary>
    public const int PortfolioPercentFieldNumber = 8;
    private readonly static double PortfolioPercentDefaultValue = 0D;

    private double portfolioPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PortfolioPercent {
      get { if ((_hasBits0 & 16) != 0) { return portfolioPercent_; } else { return PortfolioPercentDefaultValue; } }
      set {
        _hasBits0 |= 16;
        portfolioPercent_ = value;
      }
    }
    /// <summary>Gets whether the "PortfolioPercent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPortfolioPercent {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "PortfolioPercent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPortfolioPercent() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundOwnershipDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundOwnershipDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SecurityId != other.SecurityId) return false;
      if (Symbol != other.Symbol) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Share, other.Share)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Change, other.Change)) return false;
      if (!object.Equals(FilingDate, other.FilingDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PortfolioPercent, other.PortfolioPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSecurityId) hash ^= SecurityId.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasShare) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Share);
      if (HasChange) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Change);
      if (filingDate_ != null) hash ^= FilingDate.GetHashCode();
      if (HasPortfolioPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PortfolioPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasShare) {
        output.WriteRawTag(41);
        output.WriteDouble(Share);
      }
      if (HasChange) {
        output.WriteRawTag(49);
        output.WriteDouble(Change);
      }
      if (filingDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FilingDate);
      }
      if (HasPortfolioPercent) {
        output.WriteRawTag(65);
        output.WriteDouble(PortfolioPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasShare) {
        output.WriteRawTag(41);
        output.WriteDouble(Share);
      }
      if (HasChange) {
        output.WriteRawTag(49);
        output.WriteDouble(Change);
      }
      if (filingDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FilingDate);
      }
      if (HasPortfolioPercent) {
        output.WriteRawTag(65);
        output.WriteDouble(PortfolioPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SecurityId);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasShare) {
        size += 1 + 8;
      }
      if (HasChange) {
        size += 1 + 8;
      }
      if (filingDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilingDate);
      }
      if (HasPortfolioPercent) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundOwnershipDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSecurityId) {
        SecurityId = other.SecurityId;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasShare) {
        Share = other.Share;
      }
      if (other.HasChange) {
        Change = other.Change;
      }
      if (other.filingDate_ != null) {
        if (filingDate_ == null) {
          FilingDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FilingDate.MergeFrom(other.FilingDate);
      }
      if (other.HasPortfolioPercent) {
        PortfolioPercent = other.PortfolioPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 41: {
            Share = input.ReadDouble();
            break;
          }
          case 49: {
            Change = input.ReadDouble();
            break;
          }
          case 58: {
            if (filingDate_ == null) {
              FilingDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FilingDate);
            break;
          }
          case 65: {
            PortfolioPercent = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 41: {
            Share = input.ReadDouble();
            break;
          }
          case 49: {
            Change = input.ReadDouble();
            break;
          }
          case 58: {
            if (filingDate_ == null) {
              FilingDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FilingDate);
            break;
          }
          case 65: {
            PortfolioPercent = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DividendDM : pb::IMessage<DividendDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DividendDM> _parser = new pb::MessageParser<DividendDM>(() => new DividendDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DividendDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendDM(DividendDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      securityId_ = other.securityId_;
      symbol_ = other.symbol_;
      date_ = other.date_ != null ? other.date_.Clone() : null;
      currency_ = other.currency_;
      amount_ = other.amount_;
      adjustedAmount_ = other.adjustedAmount_;
      payDate_ = other.payDate_ != null ? other.payDate_.Clone() : null;
      recordDate_ = other.recordDate_ != null ? other.recordDate_.Clone() : null;
      declarationDate_ = other.declarationDate_ != null ? other.declarationDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DividendDM Clone() {
      return new DividendDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SecurityId" field.</summary>
    public const int SecurityIdFieldNumber = 2;
    private readonly static ulong SecurityIdDefaultValue = 0UL;

    private ulong securityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SecurityId {
      get { if ((_hasBits0 & 2) != 0) { return securityId_; } else { return SecurityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        securityId_ = value;
      }
    }
    /// <summary>Gets whether the "SecurityId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "SecurityId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "Symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 7;
    private readonly static global::DataModel.ECurrency CurrencyDefaultValue = global::DataModel.ECurrency.Ply;

    private global::DataModel.ECurrency currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataModel.ECurrency Currency {
      get { if ((_hasBits0 & 4) != 0) { return currency_; } else { return CurrencyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        currency_ = value;
      }
    }
    /// <summary>Gets whether the "Currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrency {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrency() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 8;
    private readonly static double AmountDefaultValue = 0D;

    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { if ((_hasBits0 & 8) != 0) { return amount_; } else { return AmountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        amount_ = value;
      }
    }
    /// <summary>Gets whether the "Amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAmount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAmount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "AdjustedAmount" field.</summary>
    public const int AdjustedAmountFieldNumber = 9;
    private readonly static double AdjustedAmountDefaultValue = 0D;

    private double adjustedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjustedAmount {
      get { if ((_hasBits0 & 16) != 0) { return adjustedAmount_; } else { return AdjustedAmountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        adjustedAmount_ = value;
      }
    }
    /// <summary>Gets whether the "AdjustedAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdjustedAmount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "AdjustedAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdjustedAmount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "PayDate" field.</summary>
    public const int PayDateFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp payDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PayDate {
      get { return payDate_; }
      set {
        payDate_ = value;
      }
    }

    /// <summary>Field number for the "RecordDate" field.</summary>
    public const int RecordDateFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp recordDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    /// <summary>Field number for the "DeclarationDate" field.</summary>
    public const int DeclarationDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp declarationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeclarationDate {
      get { return declarationDate_; }
      set {
        declarationDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DividendDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DividendDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SecurityId != other.SecurityId) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjustedAmount, other.AdjustedAmount)) return false;
      if (!object.Equals(PayDate, other.PayDate)) return false;
      if (!object.Equals(RecordDate, other.RecordDate)) return false;
      if (!object.Equals(DeclarationDate, other.DeclarationDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSecurityId) hash ^= SecurityId.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (HasAdjustedAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjustedAmount);
      if (payDate_ != null) hash ^= PayDate.GetHashCode();
      if (recordDate_ != null) hash ^= RecordDate.GetHashCode();
      if (declarationDate_ != null) hash ^= DeclarationDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (date_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Date);
      }
      if (HasCurrency) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Currency);
      }
      if (HasAmount) {
        output.WriteRawTag(65);
        output.WriteDouble(Amount);
      }
      if (HasAdjustedAmount) {
        output.WriteRawTag(73);
        output.WriteDouble(AdjustedAmount);
      }
      if (payDate_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PayDate);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(RecordDate);
      }
      if (declarationDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DeclarationDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (date_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Date);
      }
      if (HasCurrency) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Currency);
      }
      if (HasAmount) {
        output.WriteRawTag(65);
        output.WriteDouble(Amount);
      }
      if (HasAdjustedAmount) {
        output.WriteRawTag(73);
        output.WriteDouble(AdjustedAmount);
      }
      if (payDate_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PayDate);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(RecordDate);
      }
      if (declarationDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DeclarationDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SecurityId);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (HasAmount) {
        size += 1 + 8;
      }
      if (HasAdjustedAmount) {
        size += 1 + 8;
      }
      if (payDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayDate);
      }
      if (recordDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordDate);
      }
      if (declarationDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeclarationDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DividendDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSecurityId) {
        SecurityId = other.SecurityId;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasAdjustedAmount) {
        AdjustedAmount = other.AdjustedAmount;
      }
      if (other.payDate_ != null) {
        if (payDate_ == null) {
          PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PayDate.MergeFrom(other.PayDate);
      }
      if (other.recordDate_ != null) {
        if (recordDate_ == null) {
          RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RecordDate.MergeFrom(other.RecordDate);
      }
      if (other.declarationDate_ != null) {
        if (declarationDate_ == null) {
          DeclarationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeclarationDate.MergeFrom(other.DeclarationDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 50: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 56: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
          case 65: {
            Amount = input.ReadDouble();
            break;
          }
          case 73: {
            AdjustedAmount = input.ReadDouble();
            break;
          }
          case 82: {
            if (payDate_ == null) {
              PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PayDate);
            break;
          }
          case 90: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 98: {
            if (declarationDate_ == null) {
              DeclarationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclarationDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 50: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 56: {
            Currency = (global::DataModel.ECurrency) input.ReadEnum();
            break;
          }
          case 65: {
            Amount = input.ReadDouble();
            break;
          }
          case 73: {
            AdjustedAmount = input.ReadDouble();
            break;
          }
          case 82: {
            if (payDate_ == null) {
              PayDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PayDate);
            break;
          }
          case 90: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 98: {
            if (declarationDate_ == null) {
              DeclarationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclarationDate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IndexComponentDM : pb::IMessage<IndexComponentDM>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IndexComponentDM> _parser = new pb::MessageParser<IndexComponentDM>(() => new IndexComponentDM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndexComponentDM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataModel.SecurityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexComponentDM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexComponentDM(IndexComponentDM other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      securityId_ = other.securityId_;
      symbol_ = other.symbol_;
      key_ = other.key_;
      componentSecurityId_ = other.componentSecurityId_;
      componentSymbol_ = other.componentSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexComponentDM Clone() {
      return new IndexComponentDM(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SecurityId" field.</summary>
    public const int SecurityIdFieldNumber = 2;
    private readonly static ulong SecurityIdDefaultValue = 0UL;

    private ulong securityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SecurityId {
      get { if ((_hasBits0 & 2) != 0) { return securityId_; } else { return SecurityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        securityId_ = value;
      }
    }
    /// <summary>Gets whether the "SecurityId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "SecurityId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "Symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 5;
    private readonly static long KeyDefaultValue = 0L;

    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { if ((_hasBits0 & 4) != 0) { return key_; } else { return KeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        key_ = value;
      }
    }
    /// <summary>Gets whether the "Key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ComponentSecurityId" field.</summary>
    public const int ComponentSecurityIdFieldNumber = 6;
    private readonly static ulong ComponentSecurityIdDefaultValue = 0UL;

    private ulong componentSecurityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ComponentSecurityId {
      get { if ((_hasBits0 & 8) != 0) { return componentSecurityId_; } else { return ComponentSecurityIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        componentSecurityId_ = value;
      }
    }
    /// <summary>Gets whether the "ComponentSecurityId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComponentSecurityId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ComponentSecurityId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComponentSecurityId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ComponentSymbol" field.</summary>
    public const int ComponentSymbolFieldNumber = 7;
    private readonly static string ComponentSymbolDefaultValue = "";

    private string componentSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComponentSymbol {
      get { return componentSymbol_ ?? ComponentSymbolDefaultValue; }
      set {
        componentSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ComponentSymbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComponentSymbol {
      get { return componentSymbol_ != null; }
    }
    /// <summary>Clears the value of the "ComponentSymbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComponentSymbol() {
      componentSymbol_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndexComponentDM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndexComponentDM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SecurityId != other.SecurityId) return false;
      if (Symbol != other.Symbol) return false;
      if (Key != other.Key) return false;
      if (ComponentSecurityId != other.ComponentSecurityId) return false;
      if (ComponentSymbol != other.ComponentSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSecurityId) hash ^= SecurityId.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasComponentSecurityId) hash ^= ComponentSecurityId.GetHashCode();
      if (HasComponentSymbol) hash ^= ComponentSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (HasKey) {
        output.WriteRawTag(40);
        output.WriteInt64(Key);
      }
      if (HasComponentSecurityId) {
        output.WriteRawTag(48);
        output.WriteUInt64(ComponentSecurityId);
      }
      if (HasComponentSymbol) {
        output.WriteRawTag(58);
        output.WriteString(ComponentSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasSecurityId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SecurityId);
      }
      if (HasSymbol) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (HasKey) {
        output.WriteRawTag(40);
        output.WriteInt64(Key);
      }
      if (HasComponentSecurityId) {
        output.WriteRawTag(48);
        output.WriteUInt64(ComponentSecurityId);
      }
      if (HasComponentSymbol) {
        output.WriteRawTag(58);
        output.WriteString(ComponentSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SecurityId);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (HasComponentSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ComponentSecurityId);
      }
      if (HasComponentSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComponentSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndexComponentDM other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSecurityId) {
        SecurityId = other.SecurityId;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasComponentSecurityId) {
        ComponentSecurityId = other.ComponentSecurityId;
      }
      if (other.HasComponentSymbol) {
        ComponentSymbol = other.ComponentSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 40: {
            Key = input.ReadInt64();
            break;
          }
          case 48: {
            ComponentSecurityId = input.ReadUInt64();
            break;
          }
          case 58: {
            ComponentSymbol = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SecurityId = input.ReadUInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 40: {
            Key = input.ReadInt64();
            break;
          }
          case 48: {
            ComponentSecurityId = input.ReadUInt64();
            break;
          }
          case 58: {
            ComponentSymbol = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
